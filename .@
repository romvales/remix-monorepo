#!/bin/bash -

shopt -s expand_aliases

export APP=${APP:-example}
export ENV=${ENV:-dev}
export POCKETBASE_DIR="apps/${APP}.pocketbase"

# Load the environment variables from the config.toml
eval $(.bin/env/env -root apps/${APP} -env ${ENV}) && {
  case $1 in

    remix.dev)

      case $ADAPTER in
        express)
          node ./server.express.js
          ;;
        *)
          remix vite:dev
          ;;
      esac

      ;;
    
    remix.build)
      remix vite:build
      ;;

    remix.start)
      
      case $ADAPTER in
        express)
          NODE_ENV=production node ./server.express.js
          ;;
        *)
          remix-serve ./build/${APP}/server/index.js
          ;;
      esac

      ;;

    email.dev)
      email dev -d ./emails
      ;;

    email.build)
      email build -d ./emails
      ;;

    pocketbase)
      cd $POCKETBASE_DIR && eval ${@:2};
      ;;

    pocketbase.dev)
      ./.@ pocketbase go run main.go serve
      ;;

    pocketbase.build)
      ./.@ pocketbase go build -o bin/pocketbase -ldflags "-s"
      ;;

    pocketbase.migrate)
      ./.@ pocketbase go run main.go migrate collections
      ;;

    pocketbase.start)
      ./.@ pocketbase ./bin/pocketbase serve
      ;;

    pocketbase.types)
      npx pocketbase-typegen --db ./apps/${APP}.pocketbase/pb_data/data.db --out ./apps/${APP}/types/pocketbase-types.ts
      ;;

    directus.types)
      npx directus-typescript-gen \
        --host ${DIRECTUS_URL} \
        --email ${DIRECTUS_EMAIL} \
        --password ${DIRECTUS_PASSWORD} \
        --outFile ./apps/${APP}/directus.d.ts
      ;;

    prisma-js)
      npx prisma ${@:2}
      ;;

    prisma.migrate)
      ./.@ prisma-js migrate dev --schema=./apps/${APP}.server/schema.prisma
      ;;

    prisma.merge)
      migrations=$(find ./apps/${APP}.server/migrations | sort -n | grep migration.sql)
      cat $migrations > ./apps/${APP}.server/migrations/schema.sql
      ;;

    prisma-js.generate)
      ./.@ prisma-js generate --schema=./apps/${APP}.server/schema.prisma --generator js 
      ;;

    prisma-go.generate)
      cd ./apps/${APP}.server && npx prisma generate --schema=./schema.prisma --generator go
      ;;

    storybook.dev)
      ./.@ STORYBOOK=1 pnpm run storybook
      ;;

    go.dir)
      cd ./apps/${APP}.server && eval ${@:2}
      ;;

    go.dev)
      cd ./apps/${APP}.server && air
      ;;

    go.test)
      cd ./apps/${APP}.server && go clean -testcache && go test -v ./...
      ;;

    sqlc.generate)
      cd ./apps/${APP}.server && sqlc generate
      ;;

    *)
      eval ${@:1};
      ;;

  esac
} || exit 0