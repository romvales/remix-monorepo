// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: misc.sql

package db

import (
	"context"
)

const deleteDiscountById = `-- name: DeleteDiscountById :exec
DELETE FROM discounts WHERE id = $1
`

func (q *Queries) DeleteDiscountById(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDiscountById, id)
	return err
}

const deleteTaxById = `-- name: DeleteTaxById :exec
DELETE FROM taxes WHERE id = $1
`

func (q *Queries) DeleteTaxById(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTaxById, id)
	return err
}

const getDiscountById = `-- name: GetDiscountById :one
SELECT id, created, updated, starts, ends, typ, value, once, "numUsed", "usageLim", code, "shopId", deleted FROM discounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDiscountById(ctx context.Context, id string) (Discount, error) {
	row := q.db.QueryRow(ctx, getDiscountById, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Updated,
		&i.Starts,
		&i.Ends,
		&i.Typ,
		&i.Value,
		&i.Once,
		&i.NumUsed,
		&i.UsageLim,
		&i.Code,
		&i.ShopId,
		&i.Deleted,
	)
	return i, err
}

const getTaxById = `-- name: GetTaxById :one
SELECT id, created, updated, country, rate, "configId" FROM taxes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaxById(ctx context.Context, id string) (Tax, error) {
	row := q.db.QueryRow(ctx, getTaxById, id)
	var i Tax
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Updated,
		&i.Country,
		&i.Rate,
		&i.ConfigId,
	)
	return i, err
}
