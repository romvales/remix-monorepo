// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DiscountType string

const (
	DiscountTypePERCENT      DiscountType = "PERCENT"
	DiscountTypeFIXED        DiscountType = "FIXED"
	DiscountTypeFREESHIPPING DiscountType = "FREE_SHIPPING"
	DiscountTypeBNGN         DiscountType = "BNGN"
	DiscountTypeTIER         DiscountType = "TIER"
	DiscountTypeVOLUME       DiscountType = "VOLUME"
	DiscountTypeBOGO         DiscountType = "BOGO"
)

func (e *DiscountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DiscountType(s)
	case string:
		*e = DiscountType(s)
	default:
		return fmt.Errorf("unsupported scan type for DiscountType: %T", src)
	}
	return nil
}

type NullDiscountType struct {
	DiscountType DiscountType `json:"DiscountType"`
	Valid        bool         `json:"valid"` // Valid is true if DiscountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiscountType) Scan(value interface{}) error {
	if value == nil {
		ns.DiscountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DiscountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiscountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DiscountType), nil
}

type FulfillmentStatus string

const (
	FulfillmentStatusPENDING        FulfillmentStatus = "PENDING"
	FulfillmentStatusPROCESS        FulfillmentStatus = "PROCESS"
	FulfillmentStatusSHIPPED        FulfillmentStatus = "SHIPPED"
	FulfillmentStatusDELIVERED      FulfillmentStatus = "DELIVERED"
	FulfillmentStatusCANCEL         FulfillmentStatus = "CANCEL"
	FulfillmentStatusRETURN         FulfillmentStatus = "RETURN"
	FulfillmentStatusOUTFORDELIVERY FulfillmentStatus = "OUT_FOR_DELIVERY"
	FulfillmentStatusINTRANSIT      FulfillmentStatus = "IN_TRANSIT"
	FulfillmentStatusPARTIAL        FulfillmentStatus = "PARTIAL"
)

func (e *FulfillmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FulfillmentStatus(s)
	case string:
		*e = FulfillmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FulfillmentStatus: %T", src)
	}
	return nil
}

type NullFulfillmentStatus struct {
	FulfillmentStatus FulfillmentStatus `json:"FulfillmentStatus"`
	Valid             bool              `json:"valid"` // Valid is true if FulfillmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFulfillmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FulfillmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FulfillmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFulfillmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FulfillmentStatus), nil
}

type OrderStatus string

const (
	OrderStatusPENDING          OrderStatus = "PENDING"
	OrderStatusCONFIRM          OrderStatus = "CONFIRM"
	OrderStatusHOLD             OrderStatus = "HOLD"
	OrderStatusPAYMENTFAIL      OrderStatus = "PAYMENT_FAIL"
	OrderStatusAWAITINGSHIPMENT OrderStatus = "AWAITING_SHIPMENT"
	OrderStatusPARTIAL          OrderStatus = "PARTIAL"
	OrderStatusINTRANSIT        OrderStatus = "IN_TRANSIT"
	OrderStatusDELIVERED        OrderStatus = "DELIVERED"
	OrderStatusDONE             OrderStatus = "DONE"
	OrderStatusCANCEL           OrderStatus = "CANCEL"
	OrderStatusRETURN           OrderStatus = "RETURN"
	OrderStatusREFUND           OrderStatus = "REFUND"
	OrderStatusFAILED           OrderStatus = "FAILED"
	OrderStatusDISPUTE          OrderStatus = "DISPUTE"
	OrderStatusLOSTINTRANSIT    OrderStatus = "LOST_IN_TRANSIT"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"OrderStatus"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type ProductStatus string

const (
	ProductStatusDRAFT       ProductStatus = "DRAFT"
	ProductStatusACTIVE      ProductStatus = "ACTIVE"
	ProductStatusINACTIVE    ProductStatus = "INACTIVE"
	ProductStatusARCHIVED    ProductStatus = "ARCHIVED"
	ProductStatusOUTOFSTOCK  ProductStatus = "OUT_OF_STOCK"
	ProductStatusDISCONTINUE ProductStatus = "DISCONTINUE"
	ProductStatusPREORDER    ProductStatus = "PREORDER"
	ProductStatusBACKORDER   ProductStatus = "BACKORDER"
)

func (e *ProductStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductStatus(s)
	case string:
		*e = ProductStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductStatus: %T", src)
	}
	return nil
}

type NullProductStatus struct {
	ProductStatus ProductStatus `json:"ProductStatus"`
	Valid         bool          `json:"valid"` // Valid is true if ProductStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductStatus), nil
}

type TransactionKind string

const (
	TransactionKindVOID          TransactionKind = "VOID"
	TransactionKindCHARGE        TransactionKind = "CHARGE"
	TransactionKindCAPTURE       TransactionKind = "CAPTURE"
	TransactionKindAUTHORIZATION TransactionKind = "AUTHORIZATION"
	TransactionKindREFUND        TransactionKind = "REFUND"
	TransactionKindPAYOUT        TransactionKind = "PAYOUT"
	TransactionKindDISPUTE       TransactionKind = "DISPUTE"
	TransactionKindCREDIT        TransactionKind = "CREDIT"
	TransactionKindADJUST        TransactionKind = "ADJUST"
)

func (e *TransactionKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionKind(s)
	case string:
		*e = TransactionKind(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionKind: %T", src)
	}
	return nil
}

type NullTransactionKind struct {
	TransactionKind TransactionKind `json:"TransactionKind"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionKind) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionKind), nil
}

type TransactionStatus string

const (
	TransactionStatusOK      TransactionStatus = "OK"
	TransactionStatusFAIL    TransactionStatus = "FAIL"
	TransactionStatusPENDING TransactionStatus = "PENDING"
	TransactionStatusCANCEL  TransactionStatus = "CANCEL"
	TransactionStatusREFUND  TransactionStatus = "REFUND"
	TransactionStatusPROCESS TransactionStatus = "PROCESS"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"TransactionStatus"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type ChannelProduct struct {
	ID          string           `json:"id"`
	Published   pgtype.Timestamp `json:"published"`
	Active      bool             `json:"active"`
	Override    pgtype.Numeric   `json:"override"`
	Description pgtype.Text      `json:"description"`
	ProductId   string           `json:"productId"`
	ChannelId   string           `json:"channelId"`
}

type Collection struct {
	ID        string           `json:"id"`
	Created   pgtype.Timestamp `json:"created"`
	Updated   pgtype.Timestamp `json:"updated"`
	Deleted   pgtype.Timestamp `json:"deleted"`
	Published pgtype.Timestamp `json:"published"`
	IsPublish bool             `json:"isPublish"`
	Sort      pgtype.Text      `json:"sort"`
	Title     string           `json:"title"`
	Desc      pgtype.Text      `json:"desc"`
	ShopId    string           `json:"shopId"`
}

type CollectionImage struct {
	ID           string           `json:"id"`
	Created      pgtype.Timestamp `json:"created"`
	Url          string           `json:"url"`
	AltText      string           `json:"altText"`
	Position     int32            `json:"position"`
	CollectionId string           `json:"collectionId"`
}

type CollectionProduct struct {
	ID           string           `json:"id"`
	Created      pgtype.Timestamp `json:"created"`
	CollectionId string           `json:"collectionId"`
	ProductId    string           `json:"productId"`
}

type Customer struct {
	ID        string           `json:"id"`
	Created   pgtype.Timestamp `json:"created"`
	Updated   pgtype.Timestamp `json:"updated"`
	Deleted   pgtype.Timestamp `json:"deleted"`
	FullName  string           `json:"fullName"`
	Email     string           `json:"email"`
	Phone     pgtype.Text      `json:"phone"`
	Tags      []string         `json:"tags"`
	Note      pgtype.Text      `json:"note"`
	TaxExempt bool             `json:"taxExempt"`
	OwnerId   string           `json:"ownerId"`
}

type CustomersAddress struct {
	ID         string           `json:"id"`
	Created    pgtype.Timestamp `json:"created"`
	Updated    pgtype.Timestamp `json:"updated"`
	Name       string           `json:"name"`
	Company    pgtype.Text      `json:"company"`
	Country    pgtype.Text      `json:"country"`
	State      pgtype.Text      `json:"state"`
	City       pgtype.Text      `json:"city"`
	Zip        pgtype.Text      `json:"zip"`
	Addresses  []string         `json:"addresses"`
	Phone      pgtype.Text      `json:"phone"`
	CustomerId string           `json:"customerId"`
	Position   int32            `json:"position"`
}

type Discount struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Updated  pgtype.Timestamp `json:"updated"`
	Starts   pgtype.Timestamp `json:"starts"`
	Ends     pgtype.Timestamp `json:"ends"`
	Typ      DiscountType     `json:"typ"`
	Value    float64          `json:"value"`
	Once     bool             `json:"once"`
	NumUsed  int32            `json:"numUsed"`
	UsageLim pgtype.Int4      `json:"usageLim"`
	Code     string           `json:"code"`
	ShopId   string           `json:"shopId"`
	Deleted  pgtype.Timestamp `json:"deleted"`
}

type DiscountUsage struct {
	ID         string           `json:"id"`
	Created    pgtype.Timestamp `json:"created"`
	Value      float64          `json:"value"`
	Typ        DiscountType     `json:"typ"`
	DiscountId pgtype.Text      `json:"discountId"`
	OrderId    pgtype.Text      `json:"orderId"`
}

type Fulfillment struct {
	ID           string            `json:"id"`
	Created      pgtype.Timestamp  `json:"created"`
	Updated      pgtype.Timestamp  `json:"updated"`
	Status       FulfillmentStatus `json:"status"`
	TrackCompany pgtype.Text       `json:"trackCompany"`
	TrackNumber  pgtype.Text       `json:"trackNumber"`
	TrackUrl     pgtype.Text       `json:"trackUrl"`
	OrderId      string            `json:"orderId"`
}

type FulfillmentLineItem struct {
	ID            string  `json:"id"`
	Quantity      float64 `json:"quantity"`
	FulfillmentId string  `json:"fulfillmentId"`
	ItemId        string  `json:"itemId"`
}

type InventoryAdjustment struct {
	ID             string           `json:"id"`
	Created        pgtype.Timestamp `json:"created"`
	Reason         string           `json:"reason"`
	Delta          int32            `json:"delta"`
	QuantityBefore pgtype.Numeric   `json:"quantityBefore"`
	QuantityAfter  pgtype.Numeric   `json:"quantityAfter"`
	Cost           pgtype.Numeric   `json:"cost"`
	Note           pgtype.Text      `json:"note"`
	ItemId         string           `json:"itemId"`
	LocationId     string           `json:"locationId"`
	OrderId        pgtype.Text      `json:"orderId"`
}

type InventoryHistory struct {
	ID      string           `json:"id"`
	Created pgtype.Timestamp `json:"created"`
	Type    string           `json:"type"`
	Delta   pgtype.Numeric   `json:"delta"`
	Before  pgtype.Numeric   `json:"before"`
	After   pgtype.Numeric   `json:"after"`
	ItemId  string           `json:"itemId"`
	OrderId pgtype.Text      `json:"orderId"`
}

type InventoryItem struct {
	ID          string           `json:"id"`
	Created     pgtype.Timestamp `json:"created"`
	Updated     pgtype.Timestamp `json:"updated"`
	Cost        pgtype.Numeric   `json:"cost"`
	Quantity    float64          `json:"quantity"`
	Sku         pgtype.Text      `json:"sku"`
	Barcode     pgtype.Text      `json:"barcode"`
	Hscode      pgtype.Text      `json:"hscode"`
	Origin      pgtype.Text      `json:"origin"`
	Tracked     bool             `json:"tracked"`
	ReqShipping bool             `json:"reqShipping"`
	VariantId   pgtype.Text      `json:"variantId"`
}

type InventoryLevel struct {
	ID         string           `json:"id"`
	Created    pgtype.Timestamp `json:"created"`
	Updated    pgtype.Timestamp `json:"updated"`
	Available  float64          `json:"available"`
	Onhand     float64          `json:"onhand"`
	Reserved   float64          `json:"reserved"`
	Incoming   float64          `json:"incoming"`
	ItemId     string           `json:"itemId"`
	LocationId string           `json:"locationId"`
}

type Locale struct {
	ID      string           `json:"id"`
	Created pgtype.Timestamp `json:"created"`
	Updated pgtype.Timestamp `json:"updated"`
}

type Location struct {
	ID        string           `json:"id"`
	Created   pgtype.Timestamp `json:"created"`
	Updated   pgtype.Timestamp `json:"updated"`
	Country   pgtype.Text      `json:"country"`
	State     pgtype.Text      `json:"state"`
	City      pgtype.Text      `json:"city"`
	Zip       pgtype.Text      `json:"zip"`
	Addresses []string         `json:"addresses"`
	Phone     pgtype.Text      `json:"phone"`
	Active    bool             `json:"active"`
	ShopId    string           `json:"shopId"`
}

type Order struct {
	ID                 string            `json:"id"`
	Created            pgtype.Timestamp  `json:"created"`
	Updated            pgtype.Timestamp  `json:"updated"`
	Cancelled          pgtype.Timestamp  `json:"cancelled"`
	Closed             pgtype.Timestamp  `json:"closed"`
	Deleted            pgtype.Timestamp  `json:"deleted"`
	Status             OrderStatus       `json:"status"`
	FulfillmentStatus  FulfillmentStatus `json:"fulfillmentStatus"`
	OrderNumber        string            `json:"orderNumber"`
	Tags               []string          `json:"tags"`
	Note               pgtype.Text       `json:"note"`
	Currency           string            `json:"currency"`
	TotalPrice         pgtype.Numeric    `json:"totalPrice"`
	Subtotal           pgtype.Numeric    `json:"subtotal"`
	TotalTax           pgtype.Numeric    `json:"totalTax"`
	TotalShippingPrice float64           `json:"totalShippingPrice"`
	ShippingFee        float64           `json:"shippingFee"`
	CancelReason       pgtype.Text       `json:"cancelReason"`
	ShopId             string            `json:"shopId"`
	CustomerId         pgtype.Text       `json:"customerId"`
	ShippingAddressId  pgtype.Text       `json:"shippingAddressId"`
	BillingAddressId   pgtype.Text       `json:"billingAddressId"`
	ChannelId          pgtype.Text       `json:"channelId"`
}

type OrderItem struct {
	ID          string           `json:"id"`
	Created     pgtype.Timestamp `json:"created"`
	Updated     pgtype.Timestamp `json:"updated"`
	Sku         pgtype.Text      `json:"sku"`
	Vendor      pgtype.Text      `json:"vendor"`
	Price       pgtype.Numeric   `json:"price"`
	Quantity    float64          `json:"quantity"`
	Taxable     bool             `json:"taxable"`
	ReqShipping bool             `json:"reqShipping"`
	OrderId     string           `json:"orderId"`
	ProductId   pgtype.Text      `json:"productId"`
	VariantId   pgtype.Text      `json:"variantId"`
}

type PaymentGateway struct {
	ID          string           `json:"id"`
	Created     pgtype.Timestamp `json:"created"`
	Updated     pgtype.Timestamp `json:"updated"`
	Name        string           `json:"name"`
	IsActive    bool             `json:"isActive"`
	IsTestMode  bool             `json:"isTestMode"`
	Credentials []byte           `json:"credentials"`
	WebhookUrl  pgtype.Text      `json:"webhookUrl"`
}

type Product struct {
	ID        string           `json:"id"`
	Created   pgtype.Timestamp `json:"created"`
	Updated   pgtype.Timestamp `json:"updated"`
	Deleted   pgtype.Timestamp `json:"deleted"`
	Archived  pgtype.Timestamp `json:"archived"`
	Published pgtype.Timestamp `json:"published"`
	Status    ProductStatus    `json:"status"`
	Title     string           `json:"title"`
	Type      pgtype.Text      `json:"type"`
	Tags      []string         `json:"tags"`
	ShopId    string           `json:"shopId"`
}

type ProductImage struct {
	ID        string `json:"id"`
	Url       string `json:"url"`
	AltText   string `json:"altText"`
	Position  int32  `json:"position"`
	ProductId string `json:"productId"`
}

type ProductOption struct {
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Position  int32    `json:"position"`
	Values    []string `json:"values"`
	ProductId string   `json:"productId"`
}

type ProductVariant struct {
	ID          string           `json:"id"`
	Created     pgtype.Timestamp `json:"created"`
	Updated     pgtype.Timestamp `json:"updated"`
	Deleted     pgtype.Timestamp `json:"deleted"`
	Title       string           `json:"title"`
	Sku         pgtype.Text      `json:"sku"`
	Barcode     pgtype.Text      `json:"barcode"`
	Position    int32            `json:"position"`
	Taxable     bool             `json:"taxable"`
	ReqShipping bool             `json:"reqShipping"`
	Price       pgtype.Numeric   `json:"price"`
	Weight      pgtype.Float8    `json:"weight"`
	WeightUnit  string           `json:"weightUnit"`
	ProductId   string           `json:"productId"`
}

type SalesChannel struct {
	ID      string           `json:"id"`
	Created pgtype.Timestamp `json:"created"`
	Updated pgtype.Timestamp `json:"updated"`
	Name    string           `json:"name"`
	Typ     string           `json:"typ"`
	Active  bool             `json:"active"`
	ShopId  string           `json:"shopId"`
}

type Session struct {
	Token  string           `json:"token"`
	Data   []byte           `json:"data"`
	Expiry pgtype.Timestamp `json:"expiry"`
}

type ShippingRate struct {
	ID               string             `json:"id"`
	Created          pgtype.Timestamp   `json:"created"`
	Updated          pgtype.Timestamp   `json:"updated"`
	Deleted          pgtype.Timestamp   `json:"deleted"`
	Name             string             `json:"name"`
	Price            pgtype.Numeric     `json:"price"`
	SubtotalRange    []pgtype.Numeric   `json:"subtotalRange"`
	DeliveryDuration []pgtype.Timestamp `json:"deliveryDuration"`
	ZoneId           string             `json:"zoneId"`
}

type ShippingZone struct {
	ID      string           `json:"id"`
	Created pgtype.Timestamp `json:"created"`
	Updated pgtype.Timestamp `json:"updated"`
	Deleted pgtype.Timestamp `json:"deleted"`
	Name    string           `json:"name"`
	ShopId  string           `json:"shopId"`
}

type Shop struct {
	ID         string           `json:"id"`
	Created    pgtype.Timestamp `json:"created"`
	Updated    pgtype.Timestamp `json:"updated"`
	Deleted    pgtype.Timestamp `json:"deleted"`
	Name       string           `json:"name"`
	Desc       string           `json:"desc"`
	Currency   string           `json:"currency"`
	WeightUnit string           `json:"weightUnit"`
	UserId     string           `json:"userId"`
}

type Tax struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Updated  pgtype.Timestamp `json:"updated"`
	Country  string           `json:"country"`
	Rate     float64          `json:"rate"`
	ConfigId string           `json:"configId"`
}

type TaxConfiguration struct {
	ID          string           `json:"id"`
	Created     pgtype.Timestamp `json:"created"`
	Updated     pgtype.Timestamp `json:"updated"`
	Charges     bool             `json:"charges"`
	TaxIncluded bool             `json:"taxIncluded"`
	ShopId      string           `json:"shopId"`
}

type TaxLine struct {
	ID      string           `json:"id"`
	Created pgtype.Timestamp `json:"created"`
	Updated pgtype.Timestamp `json:"updated"`
	Title   string           `json:"title"`
	Price   pgtype.Numeric   `json:"price"`
	Rate    float64          `json:"rate"`
	ItemId  pgtype.Text      `json:"itemId"`
	OrderId pgtype.Text      `json:"orderId"`
}

type Transaction struct {
	ID        string            `json:"id"`
	Created   pgtype.Timestamp  `json:"created"`
	Processed pgtype.Timestamp  `json:"processed"`
	Kind      TransactionKind   `json:"kind"`
	Status    TransactionStatus `json:"status"`
	Amount    pgtype.Numeric    `json:"amount"`
	Currency  string            `json:"currency"`
	GatewayId pgtype.Text       `json:"gatewayId"`
}

type TransactionOrder struct {
	ID            string           `json:"id"`
	Created       pgtype.Timestamp `json:"created"`
	TransactionId string           `json:"transactionId"`
	OrderId       string           `json:"orderId"`
}

type User struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Updated  pgtype.Timestamp `json:"updated"`
	Deleted  pgtype.Timestamp `json:"deleted"`
	Name     string           `json:"name"`
	Username string           `json:"username"`
	Email    string           `json:"email"`
}

type Webhook struct {
	ID      string           `json:"id"`
	Created pgtype.Timestamp `json:"created"`
	Updated pgtype.Timestamp `json:"updated"`
}
