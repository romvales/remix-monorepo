// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfUserExists = `-- name: CheckIfUserExists :one
SELECT EXISTS (
  SELECT 1 FROM users 
  WHERE 
    (COALESCE($1, '') != '' AND id = $1) OR 
    (COALESCE($2, '') != '' AND email = $2) OR 
    (COALESCE($3, '') != '' AND username = $3)
)
`

type CheckIfUserExistsParams struct {
	ID       interface{} `json:"id"`
	Email    interface{} `json:"email"`
	Username interface{} `json:"username"`
}

func (q *Queries) CheckIfUserExists(ctx context.Context, arg CheckIfUserExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkIfUserExists, arg.ID, arg.Email, arg.Username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countUsers = `-- name: CountUsers :one
SELECT 
  (SELECT COUNT(*) FROM users WHERE deleted IS NULL) "totalUsers",
  (SELECT COUNT(*) FROM users WHERE deleted IS NOT NULL) "totalDeletedUsers"
`

type CountUsersRow struct {
	TotalUsers        int64 `json:"totalUsers"`
	TotalDeletedUsers int64 `json:"totalDeletedUsers"`
}

func (q *Queries) CountUsers(ctx context.Context) (CountUsersRow, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var i CountUsersRow
	err := row.Scan(&i.TotalUsers, &i.TotalDeletedUsers)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE 
  id = $1 OR
  email = $2 OR
  username = $3
`

type DeleteUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID, arg.Email, arg.Username)
	return err
}

const getSoftDeletedUsers = `-- name: GetSoftDeletedUsers :many
SELECT id, created, updated, deleted, name, username, email FROM users
WHERE
  deleted IS NOT NULL
LIMIT COALESCE($1, 10)
`

func (q *Queries) GetSoftDeletedUsers(ctx context.Context, limit interface{}) ([]User, error) {
	rows, err := q.db.Query(ctx, getSoftDeletedUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Updated,
			&i.Deleted,
			&i.Name,
			&i.Username,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT DISTINCT id, created, updated, deleted, name, username, email FROM users 
WHERE
  id = $1 OR
  email = $2 OR
  username = $3
LIMIT 1
`

type GetUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Updated,
		&i.Deleted,
		&i.Name,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created, updated, deleted, name, username, email FROM users 
WHERE 
  deleted IS NULL
LIMIT COALESCE($1, 10)
`

func (q *Queries) GetUsers(ctx context.Context, limit interface{}) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Updated,
			&i.Deleted,
			&i.Name,
			&i.Username,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveUser = `-- name: SaveUser :one
INSERT INTO users (id, updated, deleted, name, username, email) 
VALUES (
  $1, 
  NOW(), 
  $2, 
  $3, 
  $4, 
  $5)
ON CONFLICT (id)
DO UPDATE SET
  updated = EXCLUDED.updated,
  deleted = EXCLUDED.deleted,
  name = EXCLUDED.name,
  username = EXCLUDED.username,
  email = EXCLUDED.email
RETURNING id, created, updated, deleted, name, username, email
`

type SaveUserParams struct {
	ID       string           `json:"id"`
	Deleted  pgtype.Timestamp `json:"deleted"`
	Name     string           `json:"name"`
	Username string           `json:"username"`
	Email    string           `json:"email"`
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (User, error) {
	row := q.db.QueryRow(ctx, saveUser,
		arg.ID,
		arg.Deleted,
		arg.Name,
		arg.Username,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Updated,
		&i.Deleted,
		&i.Name,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted = NOW(), updated = NOW()
WHERE 
  id = $1 OR
  email = $2 OR
  username = $3
`

type SoftDeleteUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) SoftDeleteUser(ctx context.Context, arg SoftDeleteUserParams) error {
	_, err := q.db.Exec(ctx, softDeleteUser, arg.ID, arg.Email, arg.Username)
	return err
}
