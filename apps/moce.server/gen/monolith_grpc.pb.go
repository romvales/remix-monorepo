// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: monolith.proto

package gen

import (
	context "context"
	models "github.com/romvales/moceserver/gen/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MoceMonolithService_Hello_FullMethodName                      = "/monolith.MoceMonolithService/hello"
	MoceMonolithService_MoceStats_FullMethodName                  = "/monolith.MoceMonolithService/moceStats"
	MoceMonolithService_SaveUser_FullMethodName                   = "/monolith.MoceMonolithService/saveUser"
	MoceMonolithService_GetUser_FullMethodName                    = "/monolith.MoceMonolithService/getUser"
	MoceMonolithService_DeleteUser_FullMethodName                 = "/monolith.MoceMonolithService/deleteUser"
	MoceMonolithService_GetUsers_FullMethodName                   = "/monolith.MoceMonolithService/getUsers"
	MoceMonolithService_GetSoftDeletedUsers_FullMethodName        = "/monolith.MoceMonolithService/getSoftDeletedUsers"
	MoceMonolithService_CountUsers_FullMethodName                 = "/monolith.MoceMonolithService/countUsers"
	MoceMonolithService_SaveCustomer_FullMethodName               = "/monolith.MoceMonolithService/saveCustomer"
	MoceMonolithService_GetCustomer_FullMethodName                = "/monolith.MoceMonolithService/getCustomer"
	MoceMonolithService_DeleteCustomer_FullMethodName             = "/monolith.MoceMonolithService/deleteCustomer"
	MoceMonolithService_GetCustomers_FullMethodName               = "/monolith.MoceMonolithService/getCustomers"
	MoceMonolithService_GetSoftDeletedCustomers_FullMethodName    = "/monolith.MoceMonolithService/getSoftDeletedCustomers"
	MoceMonolithService_CountCustomers_FullMethodName             = "/monolith.MoceMonolithService/countCustomers"
	MoceMonolithService_SaveShop_FullMethodName                   = "/monolith.MoceMonolithService/saveShop"
	MoceMonolithService_GetShop_FullMethodName                    = "/monolith.MoceMonolithService/getShop"
	MoceMonolithService_DeleteShop_FullMethodName                 = "/monolith.MoceMonolithService/deleteShop"
	MoceMonolithService_GetShops_FullMethodName                   = "/monolith.MoceMonolithService/getShops"
	MoceMonolithService_GetSoftDeletedShops_FullMethodName        = "/monolith.MoceMonolithService/getSoftDeletedShops"
	MoceMonolithService_CountShops_FullMethodName                 = "/monolith.MoceMonolithService/countShops"
	MoceMonolithService_SaveChannel_FullMethodName                = "/monolith.MoceMonolithService/saveChannel"
	MoceMonolithService_GetChannel_FullMethodName                 = "/monolith.MoceMonolithService/getChannel"
	MoceMonolithService_DeleteChannel_FullMethodName              = "/monolith.MoceMonolithService/deleteChannel"
	MoceMonolithService_GetChannels_FullMethodName                = "/monolith.MoceMonolithService/getChannels"
	MoceMonolithService_GetSoftDeletedChannels_FullMethodName     = "/monolith.MoceMonolithService/getSoftDeletedChannels"
	MoceMonolithService_CountChannels_FullMethodName              = "/monolith.MoceMonolithService/countChannels"
	MoceMonolithService_SaveProduct_FullMethodName                = "/monolith.MoceMonolithService/saveProduct"
	MoceMonolithService_GetProduct_FullMethodName                 = "/monolith.MoceMonolithService/getProduct"
	MoceMonolithService_DeleteProduct_FullMethodName              = "/monolith.MoceMonolithService/deleteProduct"
	MoceMonolithService_GetProducts_FullMethodName                = "/monolith.MoceMonolithService/getProducts"
	MoceMonolithService_GetSoftDeletedProducts_FullMethodName     = "/monolith.MoceMonolithService/getSoftDeletedProducts"
	MoceMonolithService_CountProducts_FullMethodName              = "/monolith.MoceMonolithService/countProducts"
	MoceMonolithService_SaveOrder_FullMethodName                  = "/monolith.MoceMonolithService/saveOrder"
	MoceMonolithService_GetOrder_FullMethodName                   = "/monolith.MoceMonolithService/getOrder"
	MoceMonolithService_DeleteOrder_FullMethodName                = "/monolith.MoceMonolithService/deleteOrder"
	MoceMonolithService_GetOrders_FullMethodName                  = "/monolith.MoceMonolithService/getOrders"
	MoceMonolithService_GetSoftDeletedOrders_FullMethodName       = "/monolith.MoceMonolithService/getSoftDeletedOrders"
	MoceMonolithService_CountOrders_FullMethodName                = "/monolith.MoceMonolithService/countOrders"
	MoceMonolithService_SaveCollection_FullMethodName             = "/monolith.MoceMonolithService/saveCollection"
	MoceMonolithService_GetCollection_FullMethodName              = "/monolith.MoceMonolithService/getCollection"
	MoceMonolithService_DeleteCollection_FullMethodName           = "/monolith.MoceMonolithService/deleteCollection"
	MoceMonolithService_GetCollections_FullMethodName             = "/monolith.MoceMonolithService/getCollections"
	MoceMonolithService_GetSoftDeletedCollections_FullMethodName  = "/monolith.MoceMonolithService/getSoftDeletedCollections"
	MoceMonolithService_CountCollections_FullMethodName           = "/monolith.MoceMonolithService/countCollections"
	MoceMonolithService_CreateTransaction_FullMethodName          = "/monolith.MoceMonolithService/createTransaction"
	MoceMonolithService_GetTransaction_FullMethodName             = "/monolith.MoceMonolithService/getTransaction"
	MoceMonolithService_GetTransactions_FullMethodName            = "/monolith.MoceMonolithService/getTransactions"
	MoceMonolithService_GetSoftDeletedTransactions_FullMethodName = "/monolith.MoceMonolithService/getSoftDeletedTransactions"
	MoceMonolithService_CountTransactions_FullMethodName          = "/monolith.MoceMonolithService/countTransactions"
	MoceMonolithService_Webhooks_FullMethodName                   = "/monolith.MoceMonolithService/webhooks"
)

// MoceMonolithServiceClient is the client API for MoceMonolithService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoceMonolithServiceClient interface {
	Hello(ctx context.Context, in *models.HelloRequest, opts ...grpc.CallOption) (*models.HelloResponse, error)
	MoceStats(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	SaveUser(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error)
	GetUser(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error)
	DeleteUser(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error)
	GetUsers(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error)
	GetSoftDeletedUsers(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error)
	CountUsers(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error)
	SaveCustomer(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error)
	GetCustomer(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error)
	DeleteCustomer(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error)
	GetCustomers(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error)
	GetSoftDeletedCustomers(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error)
	CountCustomers(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error)
	SaveShop(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	GetShop(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	DeleteShop(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	GetShops(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	GetSoftDeletedShops(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	CountShops(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	SaveChannel(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	GetChannel(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	DeleteChannel(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	GetChannels(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	GetSoftDeletedChannels(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	CountChannels(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error)
	SaveProduct(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error)
	GetProduct(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error)
	DeleteProduct(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error)
	GetProducts(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error)
	GetSoftDeletedProducts(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error)
	CountProducts(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error)
	SaveOrder(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error)
	GetOrder(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error)
	DeleteOrder(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error)
	GetOrders(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error)
	GetSoftDeletedOrders(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error)
	CountOrders(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error)
	SaveCollection(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error)
	GetCollection(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error)
	DeleteCollection(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error)
	GetCollections(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error)
	GetSoftDeletedCollections(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error)
	CountCollections(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error)
	CreateTransaction(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error)
	GetTransaction(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error)
	GetTransactions(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error)
	GetSoftDeletedTransactions(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error)
	CountTransactions(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error)
	Webhooks(ctx context.Context, in *models.WebhookActionRequest, opts ...grpc.CallOption) (*models.WebhookActionResponse, error)
}

type moceMonolithServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoceMonolithServiceClient(cc grpc.ClientConnInterface) MoceMonolithServiceClient {
	return &moceMonolithServiceClient{cc}
}

func (c *moceMonolithServiceClient) Hello(ctx context.Context, in *models.HelloRequest, opts ...grpc.CallOption) (*models.HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.HelloResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) MoceStats(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, MoceMonolithService_MoceStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveUser(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.UserActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetUser(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.UserActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteUser(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.UserActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetUsers(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.UserActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedUsers(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.UserActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountUsers(ctx context.Context, in *models.UserActionRequest, opts ...grpc.CallOption) (*models.UserActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.UserActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveCustomer(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CustomerActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetCustomer(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CustomerActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteCustomer(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CustomerActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetCustomers(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CustomerActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetCustomers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedCustomers(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CustomerActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedCustomers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountCustomers(ctx context.Context, in *models.CustomerActionRequest, opts ...grpc.CallOption) (*models.CustomerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CustomerActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountCustomers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveShop(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetShop(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteShop(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetShops(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetShops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedShops(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedShops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountShops(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountShops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveChannel(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetChannel(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteChannel(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetChannels(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedChannels(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountChannels(ctx context.Context, in *models.ShopActionRequest, opts ...grpc.CallOption) (*models.ShopActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ShopActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveProduct(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ProductActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetProduct(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ProductActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteProduct(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ProductActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetProducts(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ProductActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedProducts(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ProductActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountProducts(ctx context.Context, in *models.ProductActionRequest, opts ...grpc.CallOption) (*models.ProductActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.ProductActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveOrder(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.OrderActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetOrder(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.OrderActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteOrder(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.OrderActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetOrders(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.OrderActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedOrders(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.OrderActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountOrders(ctx context.Context, in *models.OrderActionRequest, opts ...grpc.CallOption) (*models.OrderActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.OrderActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) SaveCollection(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CollectionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_SaveCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetCollection(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CollectionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) DeleteCollection(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CollectionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_DeleteCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetCollections(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CollectionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedCollections(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CollectionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountCollections(ctx context.Context, in *models.CollectionActionRequest, opts ...grpc.CallOption) (*models.CollectionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.CollectionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CreateTransaction(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.TransactionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetTransaction(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.TransactionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetTransactions(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.TransactionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) GetSoftDeletedTransactions(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.TransactionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_GetSoftDeletedTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) CountTransactions(ctx context.Context, in *models.TransactionActionRequest, opts ...grpc.CallOption) (*models.TransactionActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.TransactionActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_CountTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moceMonolithServiceClient) Webhooks(ctx context.Context, in *models.WebhookActionRequest, opts ...grpc.CallOption) (*models.WebhookActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(models.WebhookActionResponse)
	err := c.cc.Invoke(ctx, MoceMonolithService_Webhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoceMonolithServiceServer is the server API for MoceMonolithService service.
// All implementations must embed UnimplementedMoceMonolithServiceServer
// for forward compatibility.
type MoceMonolithServiceServer interface {
	Hello(context.Context, *models.HelloRequest) (*models.HelloResponse, error)
	MoceStats(context.Context, *anypb.Any) (*anypb.Any, error)
	SaveUser(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error)
	GetUser(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error)
	DeleteUser(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error)
	GetUsers(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error)
	GetSoftDeletedUsers(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error)
	CountUsers(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error)
	SaveCustomer(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error)
	GetCustomer(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error)
	DeleteCustomer(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error)
	GetCustomers(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error)
	GetSoftDeletedCustomers(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error)
	CountCustomers(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error)
	SaveShop(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	GetShop(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	DeleteShop(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	GetShops(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	GetSoftDeletedShops(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	CountShops(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	SaveChannel(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	GetChannel(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	DeleteChannel(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	GetChannels(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	GetSoftDeletedChannels(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	CountChannels(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error)
	SaveProduct(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error)
	GetProduct(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error)
	DeleteProduct(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error)
	GetProducts(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error)
	GetSoftDeletedProducts(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error)
	CountProducts(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error)
	SaveOrder(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error)
	GetOrder(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error)
	DeleteOrder(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error)
	GetOrders(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error)
	GetSoftDeletedOrders(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error)
	CountOrders(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error)
	SaveCollection(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error)
	GetCollection(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error)
	DeleteCollection(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error)
	GetCollections(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error)
	GetSoftDeletedCollections(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error)
	CountCollections(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error)
	CreateTransaction(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error)
	GetTransaction(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error)
	GetTransactions(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error)
	GetSoftDeletedTransactions(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error)
	CountTransactions(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error)
	Webhooks(context.Context, *models.WebhookActionRequest) (*models.WebhookActionResponse, error)
	mustEmbedUnimplementedMoceMonolithServiceServer()
}

// UnimplementedMoceMonolithServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoceMonolithServiceServer struct{}

func (UnimplementedMoceMonolithServiceServer) Hello(context.Context, *models.HelloRequest) (*models.HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedMoceMonolithServiceServer) MoceStats(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoceStats not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveUser(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetUser(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteUser(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetUsers(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedUsers(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedUsers not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountUsers(context.Context, *models.UserActionRequest) (*models.UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUsers not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveCustomer(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCustomer not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetCustomer(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteCustomer(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetCustomers(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedCustomers(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedCustomers not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountCustomers(context.Context, *models.CustomerActionRequest) (*models.CustomerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCustomers not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveShop(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShop not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetShop(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteShop(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetShops(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShops not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedShops(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedShops not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountShops(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShops not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveChannel(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveChannel not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetChannel(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteChannel(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetChannels(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedChannels(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedChannels not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountChannels(context.Context, *models.ShopActionRequest) (*models.ShopActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountChannels not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveProduct(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProduct not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetProduct(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteProduct(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetProducts(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedProducts(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedProducts not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountProducts(context.Context, *models.ProductActionRequest) (*models.ProductActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountProducts not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveOrder(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrder not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetOrder(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteOrder(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetOrders(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedOrders(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedOrders not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountOrders(context.Context, *models.OrderActionRequest) (*models.OrderActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrders not implemented")
}
func (UnimplementedMoceMonolithServiceServer) SaveCollection(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCollection not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetCollection(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedMoceMonolithServiceServer) DeleteCollection(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetCollections(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedCollections(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedCollections not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountCollections(context.Context, *models.CollectionActionRequest) (*models.CollectionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCollections not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CreateTransaction(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetTransaction(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetTransactions(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedMoceMonolithServiceServer) GetSoftDeletedTransactions(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftDeletedTransactions not implemented")
}
func (UnimplementedMoceMonolithServiceServer) CountTransactions(context.Context, *models.TransactionActionRequest) (*models.TransactionActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTransactions not implemented")
}
func (UnimplementedMoceMonolithServiceServer) Webhooks(context.Context, *models.WebhookActionRequest) (*models.WebhookActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Webhooks not implemented")
}
func (UnimplementedMoceMonolithServiceServer) mustEmbedUnimplementedMoceMonolithServiceServer() {}
func (UnimplementedMoceMonolithServiceServer) testEmbeddedByValue()                             {}

// UnsafeMoceMonolithServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoceMonolithServiceServer will
// result in compilation errors.
type UnsafeMoceMonolithServiceServer interface {
	mustEmbedUnimplementedMoceMonolithServiceServer()
}

func RegisterMoceMonolithServiceServer(s grpc.ServiceRegistrar, srv MoceMonolithServiceServer) {
	// If the following call pancis, it indicates UnimplementedMoceMonolithServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MoceMonolithService_ServiceDesc, srv)
}

func _MoceMonolithService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).Hello(ctx, req.(*models.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_MoceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).MoceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_MoceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).MoceStats(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.UserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveUser(ctx, req.(*models.UserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.UserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetUser(ctx, req.(*models.UserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.UserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteUser(ctx, req.(*models.UserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.UserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetUsers(ctx, req.(*models.UserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.UserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedUsers(ctx, req.(*models.UserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.UserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountUsers(ctx, req.(*models.UserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CustomerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveCustomer(ctx, req.(*models.CustomerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CustomerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetCustomer(ctx, req.(*models.CustomerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CustomerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteCustomer(ctx, req.(*models.CustomerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CustomerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetCustomers(ctx, req.(*models.CustomerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CustomerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedCustomers(ctx, req.(*models.CustomerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CustomerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountCustomers(ctx, req.(*models.CustomerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveShop(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetShop(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteShop(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetShops(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedShops(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountShops(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveChannel(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetChannel(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteChannel(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetChannels(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedChannels(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ShopActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountChannels(ctx, req.(*models.ShopActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProductActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveProduct(ctx, req.(*models.ProductActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProductActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetProduct(ctx, req.(*models.ProductActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProductActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteProduct(ctx, req.(*models.ProductActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProductActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetProducts(ctx, req.(*models.ProductActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProductActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedProducts(ctx, req.(*models.ProductActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProductActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountProducts(ctx, req.(*models.ProductActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.OrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveOrder(ctx, req.(*models.OrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.OrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetOrder(ctx, req.(*models.OrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.OrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteOrder(ctx, req.(*models.OrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.OrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetOrders(ctx, req.(*models.OrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.OrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedOrders(ctx, req.(*models.OrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.OrderActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountOrders(ctx, req.(*models.OrderActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_SaveCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CollectionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).SaveCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_SaveCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).SaveCollection(ctx, req.(*models.CollectionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CollectionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetCollection(ctx, req.(*models.CollectionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CollectionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).DeleteCollection(ctx, req.(*models.CollectionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CollectionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetCollections(ctx, req.(*models.CollectionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CollectionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedCollections(ctx, req.(*models.CollectionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.CollectionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountCollections(ctx, req.(*models.CollectionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.TransactionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CreateTransaction(ctx, req.(*models.TransactionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.TransactionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetTransaction(ctx, req.(*models.TransactionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.TransactionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetTransactions(ctx, req.(*models.TransactionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_GetSoftDeletedTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.TransactionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_GetSoftDeletedTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).GetSoftDeletedTransactions(ctx, req.(*models.TransactionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_CountTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.TransactionActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).CountTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_CountTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).CountTransactions(ctx, req.(*models.TransactionActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoceMonolithService_Webhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.WebhookActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoceMonolithServiceServer).Webhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoceMonolithService_Webhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoceMonolithServiceServer).Webhooks(ctx, req.(*models.WebhookActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoceMonolithService_ServiceDesc is the grpc.ServiceDesc for MoceMonolithService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoceMonolithService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monolith.MoceMonolithService",
	HandlerType: (*MoceMonolithServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _MoceMonolithService_Hello_Handler,
		},
		{
			MethodName: "moceStats",
			Handler:    _MoceMonolithService_MoceStats_Handler,
		},
		{
			MethodName: "saveUser",
			Handler:    _MoceMonolithService_SaveUser_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _MoceMonolithService_GetUser_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _MoceMonolithService_DeleteUser_Handler,
		},
		{
			MethodName: "getUsers",
			Handler:    _MoceMonolithService_GetUsers_Handler,
		},
		{
			MethodName: "getSoftDeletedUsers",
			Handler:    _MoceMonolithService_GetSoftDeletedUsers_Handler,
		},
		{
			MethodName: "countUsers",
			Handler:    _MoceMonolithService_CountUsers_Handler,
		},
		{
			MethodName: "saveCustomer",
			Handler:    _MoceMonolithService_SaveCustomer_Handler,
		},
		{
			MethodName: "getCustomer",
			Handler:    _MoceMonolithService_GetCustomer_Handler,
		},
		{
			MethodName: "deleteCustomer",
			Handler:    _MoceMonolithService_DeleteCustomer_Handler,
		},
		{
			MethodName: "getCustomers",
			Handler:    _MoceMonolithService_GetCustomers_Handler,
		},
		{
			MethodName: "getSoftDeletedCustomers",
			Handler:    _MoceMonolithService_GetSoftDeletedCustomers_Handler,
		},
		{
			MethodName: "countCustomers",
			Handler:    _MoceMonolithService_CountCustomers_Handler,
		},
		{
			MethodName: "saveShop",
			Handler:    _MoceMonolithService_SaveShop_Handler,
		},
		{
			MethodName: "getShop",
			Handler:    _MoceMonolithService_GetShop_Handler,
		},
		{
			MethodName: "deleteShop",
			Handler:    _MoceMonolithService_DeleteShop_Handler,
		},
		{
			MethodName: "getShops",
			Handler:    _MoceMonolithService_GetShops_Handler,
		},
		{
			MethodName: "getSoftDeletedShops",
			Handler:    _MoceMonolithService_GetSoftDeletedShops_Handler,
		},
		{
			MethodName: "countShops",
			Handler:    _MoceMonolithService_CountShops_Handler,
		},
		{
			MethodName: "saveChannel",
			Handler:    _MoceMonolithService_SaveChannel_Handler,
		},
		{
			MethodName: "getChannel",
			Handler:    _MoceMonolithService_GetChannel_Handler,
		},
		{
			MethodName: "deleteChannel",
			Handler:    _MoceMonolithService_DeleteChannel_Handler,
		},
		{
			MethodName: "getChannels",
			Handler:    _MoceMonolithService_GetChannels_Handler,
		},
		{
			MethodName: "getSoftDeletedChannels",
			Handler:    _MoceMonolithService_GetSoftDeletedChannels_Handler,
		},
		{
			MethodName: "countChannels",
			Handler:    _MoceMonolithService_CountChannels_Handler,
		},
		{
			MethodName: "saveProduct",
			Handler:    _MoceMonolithService_SaveProduct_Handler,
		},
		{
			MethodName: "getProduct",
			Handler:    _MoceMonolithService_GetProduct_Handler,
		},
		{
			MethodName: "deleteProduct",
			Handler:    _MoceMonolithService_DeleteProduct_Handler,
		},
		{
			MethodName: "getProducts",
			Handler:    _MoceMonolithService_GetProducts_Handler,
		},
		{
			MethodName: "getSoftDeletedProducts",
			Handler:    _MoceMonolithService_GetSoftDeletedProducts_Handler,
		},
		{
			MethodName: "countProducts",
			Handler:    _MoceMonolithService_CountProducts_Handler,
		},
		{
			MethodName: "saveOrder",
			Handler:    _MoceMonolithService_SaveOrder_Handler,
		},
		{
			MethodName: "getOrder",
			Handler:    _MoceMonolithService_GetOrder_Handler,
		},
		{
			MethodName: "deleteOrder",
			Handler:    _MoceMonolithService_DeleteOrder_Handler,
		},
		{
			MethodName: "getOrders",
			Handler:    _MoceMonolithService_GetOrders_Handler,
		},
		{
			MethodName: "getSoftDeletedOrders",
			Handler:    _MoceMonolithService_GetSoftDeletedOrders_Handler,
		},
		{
			MethodName: "countOrders",
			Handler:    _MoceMonolithService_CountOrders_Handler,
		},
		{
			MethodName: "saveCollection",
			Handler:    _MoceMonolithService_SaveCollection_Handler,
		},
		{
			MethodName: "getCollection",
			Handler:    _MoceMonolithService_GetCollection_Handler,
		},
		{
			MethodName: "deleteCollection",
			Handler:    _MoceMonolithService_DeleteCollection_Handler,
		},
		{
			MethodName: "getCollections",
			Handler:    _MoceMonolithService_GetCollections_Handler,
		},
		{
			MethodName: "getSoftDeletedCollections",
			Handler:    _MoceMonolithService_GetSoftDeletedCollections_Handler,
		},
		{
			MethodName: "countCollections",
			Handler:    _MoceMonolithService_CountCollections_Handler,
		},
		{
			MethodName: "createTransaction",
			Handler:    _MoceMonolithService_CreateTransaction_Handler,
		},
		{
			MethodName: "getTransaction",
			Handler:    _MoceMonolithService_GetTransaction_Handler,
		},
		{
			MethodName: "getTransactions",
			Handler:    _MoceMonolithService_GetTransactions_Handler,
		},
		{
			MethodName: "getSoftDeletedTransactions",
			Handler:    _MoceMonolithService_GetSoftDeletedTransactions_Handler,
		},
		{
			MethodName: "countTransactions",
			Handler:    _MoceMonolithService_CountTransactions_Handler,
		},
		{
			MethodName: "webhooks",
			Handler:    _MoceMonolithService_Webhooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monolith.proto",
}
