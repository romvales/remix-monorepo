/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.2
 * source: monolith.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./models/props";
import * as dependency_2 from "./models/requests";
import * as dependency_3 from "./models/responses";
import * as dependency_4 from "./google/protobuf/any";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedMoceMonolithServiceService {
    static definition = {
        hello: {
            path: "/monolith.MoceMonolithService/hello",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HelloRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HelloRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HelloResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HelloResponse.deserialize(new Uint8Array(bytes))
        },
        moceStats: {
            path: "/monolith.MoceMonolithService/moceStats",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_4.Any) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_4.Any.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.Any) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.Any.deserialize(new Uint8Array(bytes))
        },
        saveUser: {
            path: "/monolith.MoceMonolithService/saveUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.UserActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.UserActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.UserActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.UserActionResponse.deserialize(new Uint8Array(bytes))
        },
        getUser: {
            path: "/monolith.MoceMonolithService/getUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.UserActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.UserActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.UserActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.UserActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteUser: {
            path: "/monolith.MoceMonolithService/deleteUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.UserActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.UserActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.UserActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.UserActionResponse.deserialize(new Uint8Array(bytes))
        },
        getUsers: {
            path: "/monolith.MoceMonolithService/getUsers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.UserActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.UserActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.UserActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.UserActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedUsers: {
            path: "/monolith.MoceMonolithService/getSoftDeletedUsers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.UserActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.UserActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.UserActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.UserActionResponse.deserialize(new Uint8Array(bytes))
        },
        countUsers: {
            path: "/monolith.MoceMonolithService/countUsers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.UserActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.UserActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.UserActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.UserActionResponse.deserialize(new Uint8Array(bytes))
        },
        saveCustomer: {
            path: "/monolith.MoceMonolithService/saveCustomer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CustomerActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CustomerActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CustomerActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CustomerActionResponse.deserialize(new Uint8Array(bytes))
        },
        getCustomer: {
            path: "/monolith.MoceMonolithService/getCustomer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CustomerActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CustomerActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CustomerActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CustomerActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteCustomer: {
            path: "/monolith.MoceMonolithService/deleteCustomer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CustomerActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CustomerActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CustomerActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CustomerActionResponse.deserialize(new Uint8Array(bytes))
        },
        getCustomers: {
            path: "/monolith.MoceMonolithService/getCustomers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CustomerActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CustomerActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CustomerActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CustomerActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedCustomers: {
            path: "/monolith.MoceMonolithService/getSoftDeletedCustomers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CustomerActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CustomerActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CustomerActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CustomerActionResponse.deserialize(new Uint8Array(bytes))
        },
        countCustomers: {
            path: "/monolith.MoceMonolithService/countCustomers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CustomerActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CustomerActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CustomerActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CustomerActionResponse.deserialize(new Uint8Array(bytes))
        },
        saveShop: {
            path: "/monolith.MoceMonolithService/saveShop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        getShop: {
            path: "/monolith.MoceMonolithService/getShop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteShop: {
            path: "/monolith.MoceMonolithService/deleteShop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        getShops: {
            path: "/monolith.MoceMonolithService/getShops",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedShops: {
            path: "/monolith.MoceMonolithService/getSoftDeletedShops",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        countShops: {
            path: "/monolith.MoceMonolithService/countShops",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        saveChannel: {
            path: "/monolith.MoceMonolithService/saveChannel",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        getChannel: {
            path: "/monolith.MoceMonolithService/getChannel",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteChannel: {
            path: "/monolith.MoceMonolithService/deleteChannel",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        getChannels: {
            path: "/monolith.MoceMonolithService/getChannels",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedChannels: {
            path: "/monolith.MoceMonolithService/getSoftDeletedChannels",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        countChannels: {
            path: "/monolith.MoceMonolithService/countChannels",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ShopActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ShopActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ShopActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ShopActionResponse.deserialize(new Uint8Array(bytes))
        },
        saveProduct: {
            path: "/monolith.MoceMonolithService/saveProduct",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ProductActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ProductActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ProductActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ProductActionResponse.deserialize(new Uint8Array(bytes))
        },
        getProduct: {
            path: "/monolith.MoceMonolithService/getProduct",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ProductActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ProductActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ProductActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ProductActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteProduct: {
            path: "/monolith.MoceMonolithService/deleteProduct",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ProductActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ProductActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ProductActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ProductActionResponse.deserialize(new Uint8Array(bytes))
        },
        getProducts: {
            path: "/monolith.MoceMonolithService/getProducts",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ProductActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ProductActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ProductActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ProductActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedProducts: {
            path: "/monolith.MoceMonolithService/getSoftDeletedProducts",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ProductActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ProductActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ProductActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ProductActionResponse.deserialize(new Uint8Array(bytes))
        },
        countProducts: {
            path: "/monolith.MoceMonolithService/countProducts",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.ProductActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.ProductActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.ProductActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.ProductActionResponse.deserialize(new Uint8Array(bytes))
        },
        saveOrder: {
            path: "/monolith.MoceMonolithService/saveOrder",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.OrderActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.OrderActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.OrderActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.OrderActionResponse.deserialize(new Uint8Array(bytes))
        },
        getOrder: {
            path: "/monolith.MoceMonolithService/getOrder",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.OrderActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.OrderActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.OrderActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.OrderActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteOrder: {
            path: "/monolith.MoceMonolithService/deleteOrder",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.OrderActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.OrderActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.OrderActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.OrderActionResponse.deserialize(new Uint8Array(bytes))
        },
        getOrders: {
            path: "/monolith.MoceMonolithService/getOrders",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.OrderActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.OrderActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.OrderActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.OrderActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedOrders: {
            path: "/monolith.MoceMonolithService/getSoftDeletedOrders",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.OrderActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.OrderActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.OrderActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.OrderActionResponse.deserialize(new Uint8Array(bytes))
        },
        countOrders: {
            path: "/monolith.MoceMonolithService/countOrders",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.OrderActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.OrderActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.OrderActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.OrderActionResponse.deserialize(new Uint8Array(bytes))
        },
        saveCollection: {
            path: "/monolith.MoceMonolithService/saveCollection",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CollectionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CollectionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CollectionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CollectionActionResponse.deserialize(new Uint8Array(bytes))
        },
        getCollection: {
            path: "/monolith.MoceMonolithService/getCollection",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CollectionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CollectionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CollectionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CollectionActionResponse.deserialize(new Uint8Array(bytes))
        },
        deleteCollection: {
            path: "/monolith.MoceMonolithService/deleteCollection",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CollectionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CollectionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CollectionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CollectionActionResponse.deserialize(new Uint8Array(bytes))
        },
        getCollections: {
            path: "/monolith.MoceMonolithService/getCollections",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CollectionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CollectionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CollectionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CollectionActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedCollections: {
            path: "/monolith.MoceMonolithService/getSoftDeletedCollections",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CollectionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CollectionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CollectionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CollectionActionResponse.deserialize(new Uint8Array(bytes))
        },
        countCollections: {
            path: "/monolith.MoceMonolithService/countCollections",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.CollectionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.CollectionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.CollectionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.CollectionActionResponse.deserialize(new Uint8Array(bytes))
        },
        createTransaction: {
            path: "/monolith.MoceMonolithService/createTransaction",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.TransactionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.TransactionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.TransactionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.TransactionActionResponse.deserialize(new Uint8Array(bytes))
        },
        getTransaction: {
            path: "/monolith.MoceMonolithService/getTransaction",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.TransactionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.TransactionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.TransactionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.TransactionActionResponse.deserialize(new Uint8Array(bytes))
        },
        getTransactions: {
            path: "/monolith.MoceMonolithService/getTransactions",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.TransactionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.TransactionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.TransactionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.TransactionActionResponse.deserialize(new Uint8Array(bytes))
        },
        getSoftDeletedTransactions: {
            path: "/monolith.MoceMonolithService/getSoftDeletedTransactions",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.TransactionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.TransactionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.TransactionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.TransactionActionResponse.deserialize(new Uint8Array(bytes))
        },
        countTransactions: {
            path: "/monolith.MoceMonolithService/countTransactions",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.TransactionActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.TransactionActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.TransactionActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.TransactionActionResponse.deserialize(new Uint8Array(bytes))
        },
        webhooks: {
            path: "/monolith.MoceMonolithService/webhooks",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.WebhookActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.WebhookActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.WebhookActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.WebhookActionResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract hello(call: grpc_1.ServerUnaryCall<dependency_1.HelloRequest, dependency_1.HelloResponse>, callback: grpc_1.sendUnaryData<dependency_1.HelloResponse>): void;
    abstract moceStats(call: grpc_1.ServerUnaryCall<dependency_4.Any, dependency_4.Any>, callback: grpc_1.sendUnaryData<dependency_4.Any>): void;
    abstract saveUser(call: grpc_1.ServerUnaryCall<dependency_2.UserActionRequest, dependency_3.UserActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.UserActionResponse>): void;
    abstract getUser(call: grpc_1.ServerUnaryCall<dependency_2.UserActionRequest, dependency_3.UserActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.UserActionResponse>): void;
    abstract deleteUser(call: grpc_1.ServerUnaryCall<dependency_2.UserActionRequest, dependency_3.UserActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.UserActionResponse>): void;
    abstract getUsers(call: grpc_1.ServerUnaryCall<dependency_2.UserActionRequest, dependency_3.UserActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.UserActionResponse>): void;
    abstract getSoftDeletedUsers(call: grpc_1.ServerUnaryCall<dependency_2.UserActionRequest, dependency_3.UserActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.UserActionResponse>): void;
    abstract countUsers(call: grpc_1.ServerUnaryCall<dependency_2.UserActionRequest, dependency_3.UserActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.UserActionResponse>): void;
    abstract saveCustomer(call: grpc_1.ServerUnaryCall<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CustomerActionResponse>): void;
    abstract getCustomer(call: grpc_1.ServerUnaryCall<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CustomerActionResponse>): void;
    abstract deleteCustomer(call: grpc_1.ServerUnaryCall<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CustomerActionResponse>): void;
    abstract getCustomers(call: grpc_1.ServerUnaryCall<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CustomerActionResponse>): void;
    abstract getSoftDeletedCustomers(call: grpc_1.ServerUnaryCall<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CustomerActionResponse>): void;
    abstract countCustomers(call: grpc_1.ServerUnaryCall<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CustomerActionResponse>): void;
    abstract saveShop(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract getShop(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract deleteShop(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract getShops(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract getSoftDeletedShops(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract countShops(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract saveChannel(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract getChannel(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract deleteChannel(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract getChannels(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract getSoftDeletedChannels(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract countChannels(call: grpc_1.ServerUnaryCall<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ShopActionResponse>): void;
    abstract saveProduct(call: grpc_1.ServerUnaryCall<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ProductActionResponse>): void;
    abstract getProduct(call: grpc_1.ServerUnaryCall<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ProductActionResponse>): void;
    abstract deleteProduct(call: grpc_1.ServerUnaryCall<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ProductActionResponse>): void;
    abstract getProducts(call: grpc_1.ServerUnaryCall<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ProductActionResponse>): void;
    abstract getSoftDeletedProducts(call: grpc_1.ServerUnaryCall<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ProductActionResponse>): void;
    abstract countProducts(call: grpc_1.ServerUnaryCall<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.ProductActionResponse>): void;
    abstract saveOrder(call: grpc_1.ServerUnaryCall<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.OrderActionResponse>): void;
    abstract getOrder(call: grpc_1.ServerUnaryCall<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.OrderActionResponse>): void;
    abstract deleteOrder(call: grpc_1.ServerUnaryCall<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.OrderActionResponse>): void;
    abstract getOrders(call: grpc_1.ServerUnaryCall<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.OrderActionResponse>): void;
    abstract getSoftDeletedOrders(call: grpc_1.ServerUnaryCall<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.OrderActionResponse>): void;
    abstract countOrders(call: grpc_1.ServerUnaryCall<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.OrderActionResponse>): void;
    abstract saveCollection(call: grpc_1.ServerUnaryCall<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CollectionActionResponse>): void;
    abstract getCollection(call: grpc_1.ServerUnaryCall<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CollectionActionResponse>): void;
    abstract deleteCollection(call: grpc_1.ServerUnaryCall<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CollectionActionResponse>): void;
    abstract getCollections(call: grpc_1.ServerUnaryCall<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CollectionActionResponse>): void;
    abstract getSoftDeletedCollections(call: grpc_1.ServerUnaryCall<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CollectionActionResponse>): void;
    abstract countCollections(call: grpc_1.ServerUnaryCall<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.CollectionActionResponse>): void;
    abstract createTransaction(call: grpc_1.ServerUnaryCall<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.TransactionActionResponse>): void;
    abstract getTransaction(call: grpc_1.ServerUnaryCall<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.TransactionActionResponse>): void;
    abstract getTransactions(call: grpc_1.ServerUnaryCall<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.TransactionActionResponse>): void;
    abstract getSoftDeletedTransactions(call: grpc_1.ServerUnaryCall<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.TransactionActionResponse>): void;
    abstract countTransactions(call: grpc_1.ServerUnaryCall<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.TransactionActionResponse>): void;
    abstract webhooks(call: grpc_1.ServerUnaryCall<dependency_2.WebhookActionRequest, dependency_3.WebhookActionResponse>, callback: grpc_1.sendUnaryData<dependency_3.WebhookActionResponse>): void;
}
export class MoceMonolithServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMoceMonolithServiceService.definition, "MoceMonolithService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    hello: GrpcPromiseServiceInterface<dependency_1.HelloRequest, dependency_1.HelloResponse> = (message: dependency_1.HelloRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HelloResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.hello(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HelloResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    moceStats: GrpcPromiseServiceInterface<dependency_4.Any, dependency_4.Any> = (message: dependency_4.Any, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.Any> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.moceStats(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.Any) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveUser: GrpcPromiseServiceInterface<dependency_2.UserActionRequest, dependency_3.UserActionResponse> = (message: dependency_2.UserActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.UserActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveUser(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.UserActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getUser: GrpcPromiseServiceInterface<dependency_2.UserActionRequest, dependency_3.UserActionResponse> = (message: dependency_2.UserActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.UserActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getUser(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.UserActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteUser: GrpcPromiseServiceInterface<dependency_2.UserActionRequest, dependency_3.UserActionResponse> = (message: dependency_2.UserActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.UserActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteUser(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.UserActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getUsers: GrpcPromiseServiceInterface<dependency_2.UserActionRequest, dependency_3.UserActionResponse> = (message: dependency_2.UserActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.UserActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getUsers(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.UserActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedUsers: GrpcPromiseServiceInterface<dependency_2.UserActionRequest, dependency_3.UserActionResponse> = (message: dependency_2.UserActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.UserActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedUsers(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.UserActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countUsers: GrpcPromiseServiceInterface<dependency_2.UserActionRequest, dependency_3.UserActionResponse> = (message: dependency_2.UserActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.UserActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countUsers(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.UserActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveCustomer: GrpcPromiseServiceInterface<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse> = (message: dependency_2.CustomerActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CustomerActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveCustomer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CustomerActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getCustomer: GrpcPromiseServiceInterface<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse> = (message: dependency_2.CustomerActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CustomerActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getCustomer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CustomerActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteCustomer: GrpcPromiseServiceInterface<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse> = (message: dependency_2.CustomerActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CustomerActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteCustomer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CustomerActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getCustomers: GrpcPromiseServiceInterface<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse> = (message: dependency_2.CustomerActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CustomerActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getCustomers(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CustomerActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedCustomers: GrpcPromiseServiceInterface<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse> = (message: dependency_2.CustomerActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CustomerActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedCustomers(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CustomerActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countCustomers: GrpcPromiseServiceInterface<dependency_2.CustomerActionRequest, dependency_3.CustomerActionResponse> = (message: dependency_2.CustomerActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CustomerActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countCustomers(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CustomerActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveShop: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveShop(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getShop: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getShop(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteShop: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteShop(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getShops: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getShops(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedShops: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedShops(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countShops: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countShops(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveChannel: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveChannel(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getChannel: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getChannel(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteChannel: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteChannel(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getChannels: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getChannels(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedChannels: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedChannels(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countChannels: GrpcPromiseServiceInterface<dependency_2.ShopActionRequest, dependency_3.ShopActionResponse> = (message: dependency_2.ShopActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ShopActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countChannels(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ShopActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveProduct: GrpcPromiseServiceInterface<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse> = (message: dependency_2.ProductActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ProductActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveProduct(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ProductActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getProduct: GrpcPromiseServiceInterface<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse> = (message: dependency_2.ProductActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ProductActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getProduct(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ProductActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteProduct: GrpcPromiseServiceInterface<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse> = (message: dependency_2.ProductActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ProductActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteProduct(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ProductActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getProducts: GrpcPromiseServiceInterface<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse> = (message: dependency_2.ProductActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ProductActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getProducts(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ProductActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedProducts: GrpcPromiseServiceInterface<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse> = (message: dependency_2.ProductActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ProductActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedProducts(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ProductActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countProducts: GrpcPromiseServiceInterface<dependency_2.ProductActionRequest, dependency_3.ProductActionResponse> = (message: dependency_2.ProductActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.ProductActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countProducts(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.ProductActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveOrder: GrpcPromiseServiceInterface<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse> = (message: dependency_2.OrderActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.OrderActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveOrder(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.OrderActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getOrder: GrpcPromiseServiceInterface<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse> = (message: dependency_2.OrderActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.OrderActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getOrder(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.OrderActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteOrder: GrpcPromiseServiceInterface<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse> = (message: dependency_2.OrderActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.OrderActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteOrder(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.OrderActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getOrders: GrpcPromiseServiceInterface<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse> = (message: dependency_2.OrderActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.OrderActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getOrders(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.OrderActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedOrders: GrpcPromiseServiceInterface<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse> = (message: dependency_2.OrderActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.OrderActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedOrders(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.OrderActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countOrders: GrpcPromiseServiceInterface<dependency_2.OrderActionRequest, dependency_3.OrderActionResponse> = (message: dependency_2.OrderActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.OrderActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countOrders(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.OrderActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    saveCollection: GrpcPromiseServiceInterface<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse> = (message: dependency_2.CollectionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CollectionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.saveCollection(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CollectionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getCollection: GrpcPromiseServiceInterface<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse> = (message: dependency_2.CollectionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CollectionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getCollection(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CollectionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteCollection: GrpcPromiseServiceInterface<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse> = (message: dependency_2.CollectionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CollectionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteCollection(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CollectionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getCollections: GrpcPromiseServiceInterface<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse> = (message: dependency_2.CollectionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CollectionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getCollections(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CollectionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedCollections: GrpcPromiseServiceInterface<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse> = (message: dependency_2.CollectionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CollectionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedCollections(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CollectionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countCollections: GrpcPromiseServiceInterface<dependency_2.CollectionActionRequest, dependency_3.CollectionActionResponse> = (message: dependency_2.CollectionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.CollectionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countCollections(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.CollectionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    createTransaction: GrpcPromiseServiceInterface<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse> = (message: dependency_2.TransactionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.TransactionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.createTransaction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.TransactionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getTransaction: GrpcPromiseServiceInterface<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse> = (message: dependency_2.TransactionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.TransactionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getTransaction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.TransactionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getTransactions: GrpcPromiseServiceInterface<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse> = (message: dependency_2.TransactionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.TransactionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getTransactions(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.TransactionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getSoftDeletedTransactions: GrpcPromiseServiceInterface<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse> = (message: dependency_2.TransactionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.TransactionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getSoftDeletedTransactions(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.TransactionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    countTransactions: GrpcPromiseServiceInterface<dependency_2.TransactionActionRequest, dependency_3.TransactionActionResponse> = (message: dependency_2.TransactionActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.TransactionActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.countTransactions(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.TransactionActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    webhooks: GrpcPromiseServiceInterface<dependency_2.WebhookActionRequest, dependency_3.WebhookActionResponse> = (message: dependency_2.WebhookActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.WebhookActionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.webhooks(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.WebhookActionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
