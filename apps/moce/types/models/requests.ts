/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.2
 * source: models/requests.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./core";
import * as pb_1 from "google-protobuf";
export class RequestArgs extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        filter?: RequestArgsFilterOptions;
    }) | ({
        paging?: RequestArgsPaginationOptions;
    }) | ({
        softDelete?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filter" in data && data.filter != undefined) {
                this.filter = data.filter;
            }
            if ("paging" in data && data.paging != undefined) {
                this.paging = data.paging;
            }
            if ("softDelete" in data && data.softDelete != undefined) {
                this.softDelete = data.softDelete;
            }
        }
    }
    get filter() {
        return pb_1.Message.getWrapperField(this, RequestArgsFilterOptions, 1) as RequestArgsFilterOptions;
    }
    set filter(value: RequestArgsFilterOptions) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasFilter() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get paging() {
        return pb_1.Message.getWrapperField(this, RequestArgsPaginationOptions, 2) as RequestArgsPaginationOptions;
    }
    set paging(value: RequestArgsPaginationOptions) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasPaging() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get softDelete() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set softDelete(value: boolean) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get hasSoftDelete() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _filter() {
        const cases: {
            [index: number]: "none" | "filter";
        } = {
            0: "none",
            1: "filter"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _paging() {
        const cases: {
            [index: number]: "none" | "paging";
        } = {
            0: "none",
            2: "paging"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _softDelete() {
        const cases: {
            [index: number]: "none" | "softDelete";
        } = {
            0: "none",
            3: "softDelete"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        filter?: ReturnType<typeof RequestArgsFilterOptions.prototype.toObject>;
        paging?: ReturnType<typeof RequestArgsPaginationOptions.prototype.toObject>;
        softDelete?: boolean;
    }): RequestArgs {
        const message = new RequestArgs({});
        if (data.filter != null) {
            message.filter = RequestArgsFilterOptions.fromObject(data.filter);
        }
        if (data.paging != null) {
            message.paging = RequestArgsPaginationOptions.fromObject(data.paging);
        }
        if (data.softDelete != null) {
            message.softDelete = data.softDelete;
        }
        return message;
    }
    toObject() {
        const data: {
            filter?: ReturnType<typeof RequestArgsFilterOptions.prototype.toObject>;
            paging?: ReturnType<typeof RequestArgsPaginationOptions.prototype.toObject>;
            softDelete?: boolean;
        } = {};
        if (this.filter != null) {
            data.filter = this.filter.toObject();
        }
        if (this.paging != null) {
            data.paging = this.paging.toObject();
        }
        if (this.softDelete != null) {
            data.softDelete = this.softDelete;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasFilter)
            writer.writeMessage(1, this.filter, () => this.filter.serialize(writer));
        if (this.hasPaging)
            writer.writeMessage(2, this.paging, () => this.paging.serialize(writer));
        if (this.hasSoftDelete)
            writer.writeBool(3, this.softDelete);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestArgs {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestArgs();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.filter, () => message.filter = RequestArgsFilterOptions.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.paging, () => message.paging = RequestArgsPaginationOptions.deserialize(reader));
                    break;
                case 3:
                    message.softDelete = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestArgs {
        return RequestArgs.deserialize(bytes);
    }
}
export class RequestArgsPaginationOptions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        page?: number;
        itemsPerPage?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("itemsPerPage" in data && data.itemsPerPage != undefined) {
                this.itemsPerPage = data.itemsPerPage;
            }
        }
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get itemsPerPage() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set itemsPerPage(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        page?: number;
        itemsPerPage?: number;
    }): RequestArgsPaginationOptions {
        const message = new RequestArgsPaginationOptions({});
        if (data.page != null) {
            message.page = data.page;
        }
        if (data.itemsPerPage != null) {
            message.itemsPerPage = data.itemsPerPage;
        }
        return message;
    }
    toObject() {
        const data: {
            page?: number;
            itemsPerPage?: number;
        } = {};
        if (this.page != null) {
            data.page = this.page;
        }
        if (this.itemsPerPage != null) {
            data.itemsPerPage = this.itemsPerPage;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.page != 0)
            writer.writeInt32(1, this.page);
        if (this.itemsPerPage != 0)
            writer.writeInt32(2, this.itemsPerPage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestArgsPaginationOptions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestArgsPaginationOptions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.page = reader.readInt32();
                    break;
                case 2:
                    message.itemsPerPage = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestArgsPaginationOptions {
        return RequestArgsPaginationOptions.deserialize(bytes);
    }
}
export class RequestArgsFilterOptions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        search?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("search" in data && data.search != undefined) {
                this.search = data.search;
            }
        }
    }
    get search() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set search(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        search?: string;
    }): RequestArgsFilterOptions {
        const message = new RequestArgsFilterOptions({});
        if (data.search != null) {
            message.search = data.search;
        }
        return message;
    }
    toObject() {
        const data: {
            search?: string;
        } = {};
        if (this.search != null) {
            data.search = this.search;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.search.length)
            writer.writeString(1, this.search);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestArgsFilterOptions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestArgsFilterOptions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.search = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestArgsFilterOptions {
        return RequestArgsFilterOptions.deserialize(bytes);
    }
}
export class UserActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        user?: dependency_1.User;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUser() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _user() {
        const cases: {
            [index: number]: "none" | "user";
        } = {
            0: "none",
            1: "user"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): UserActionRequest {
        const message = new UserActionRequest({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUser)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserActionRequest {
        return UserActionRequest.deserialize(bytes);
    }
}
export class CustomerActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        customer?: dependency_1.Customer;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("customer" in data && data.customer != undefined) {
                this.customer = data.customer;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get customer() {
        return pb_1.Message.getWrapperField(this, dependency_1.Customer, 1) as dependency_1.Customer;
    }
    set customer(value: dependency_1.Customer) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasCustomer() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _customer() {
        const cases: {
            [index: number]: "none" | "customer";
        } = {
            0: "none",
            1: "customer"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        customer?: ReturnType<typeof dependency_1.Customer.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): CustomerActionRequest {
        const message = new CustomerActionRequest({});
        if (data.customer != null) {
            message.customer = dependency_1.Customer.fromObject(data.customer);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            customer?: ReturnType<typeof dependency_1.Customer.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.customer != null) {
            data.customer = this.customer.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasCustomer)
            writer.writeMessage(1, this.customer, () => this.customer.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.customer, () => message.customer = dependency_1.Customer.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomerActionRequest {
        return CustomerActionRequest.deserialize(bytes);
    }
}
export class ShopActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        shop?: dependency_1.Shop;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, dependency_1.Shop, 1) as dependency_1.Shop;
    }
    set shop(value: dependency_1.Shop) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _shop() {
        const cases: {
            [index: number]: "none" | "shop";
        } = {
            0: "none",
            1: "shop"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        shop?: ReturnType<typeof dependency_1.Shop.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): ShopActionRequest {
        const message = new ShopActionRequest({});
        if (data.shop != null) {
            message.shop = dependency_1.Shop.fromObject(data.shop);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            shop?: ReturnType<typeof dependency_1.Shop.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasShop)
            writer.writeMessage(1, this.shop, () => this.shop.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShopActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShopActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.shop, () => message.shop = dependency_1.Shop.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShopActionRequest {
        return ShopActionRequest.deserialize(bytes);
    }
}
export class ProductActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        product?: dependency_1.Product;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get product() {
        return pb_1.Message.getWrapperField(this, dependency_1.Product, 1) as dependency_1.Product;
    }
    set product(value: dependency_1.Product) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _product() {
        const cases: {
            [index: number]: "none" | "product";
        } = {
            0: "none",
            1: "product"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        product?: ReturnType<typeof dependency_1.Product.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): ProductActionRequest {
        const message = new ProductActionRequest({});
        if (data.product != null) {
            message.product = dependency_1.Product.fromObject(data.product);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            product?: ReturnType<typeof dependency_1.Product.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasProduct)
            writer.writeMessage(1, this.product, () => this.product.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.product, () => message.product = dependency_1.Product.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductActionRequest {
        return ProductActionRequest.deserialize(bytes);
    }
}
export class OrderActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        order?: dependency_1.Order;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get order() {
        return pb_1.Message.getWrapperField(this, dependency_1.Order, 1) as dependency_1.Order;
    }
    set order(value: dependency_1.Order) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _order() {
        const cases: {
            [index: number]: "none" | "order";
        } = {
            0: "none",
            1: "order"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        order?: ReturnType<typeof dependency_1.Order.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): OrderActionRequest {
        const message = new OrderActionRequest({});
        if (data.order != null) {
            message.order = dependency_1.Order.fromObject(data.order);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            order?: ReturnType<typeof dependency_1.Order.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOrder)
            writer.writeMessage(1, this.order, () => this.order.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.order, () => message.order = dependency_1.Order.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrderActionRequest {
        return OrderActionRequest.deserialize(bytes);
    }
}
export class CollectionActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        collection?: dependency_1.Collection;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("collection" in data && data.collection != undefined) {
                this.collection = data.collection;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get collection() {
        return pb_1.Message.getWrapperField(this, dependency_1.Collection, 1) as dependency_1.Collection;
    }
    set collection(value: dependency_1.Collection) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasCollection() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _collection() {
        const cases: {
            [index: number]: "none" | "collection";
        } = {
            0: "none",
            1: "collection"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        collection?: ReturnType<typeof dependency_1.Collection.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): CollectionActionRequest {
        const message = new CollectionActionRequest({});
        if (data.collection != null) {
            message.collection = dependency_1.Collection.fromObject(data.collection);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            collection?: ReturnType<typeof dependency_1.Collection.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.collection != null) {
            data.collection = this.collection.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasCollection)
            writer.writeMessage(1, this.collection, () => this.collection.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.collection, () => message.collection = dependency_1.Collection.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CollectionActionRequest {
        return CollectionActionRequest.deserialize(bytes);
    }
}
export class TransactionActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        transaction?: dependency_1.Transaction;
    }) | ({
        args?: RequestArgs;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("transaction" in data && data.transaction != undefined) {
                this.transaction = data.transaction;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get transaction() {
        return pb_1.Message.getWrapperField(this, dependency_1.Transaction, 1) as dependency_1.Transaction;
    }
    set transaction(value: dependency_1.Transaction) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasTransaction() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get args() {
        return pb_1.Message.getWrapperField(this, RequestArgs, 2) as RequestArgs;
    }
    set args(value: RequestArgs) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get hasArgs() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _transaction() {
        const cases: {
            [index: number]: "none" | "transaction";
        } = {
            0: "none",
            1: "transaction"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _args() {
        const cases: {
            [index: number]: "none" | "args";
        } = {
            0: "none",
            2: "args"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        transaction?: ReturnType<typeof dependency_1.Transaction.prototype.toObject>;
        args?: ReturnType<typeof RequestArgs.prototype.toObject>;
    }): TransactionActionRequest {
        const message = new TransactionActionRequest({});
        if (data.transaction != null) {
            message.transaction = dependency_1.Transaction.fromObject(data.transaction);
        }
        if (data.args != null) {
            message.args = RequestArgs.fromObject(data.args);
        }
        return message;
    }
    toObject() {
        const data: {
            transaction?: ReturnType<typeof dependency_1.Transaction.prototype.toObject>;
            args?: ReturnType<typeof RequestArgs.prototype.toObject>;
        } = {};
        if (this.transaction != null) {
            data.transaction = this.transaction.toObject();
        }
        if (this.args != null) {
            data.args = this.args.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasTransaction)
            writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
        if (this.hasArgs)
            writer.writeMessage(2, this.args, () => this.args.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.transaction, () => message.transaction = dependency_1.Transaction.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.args, () => message.args = RequestArgs.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransactionActionRequest {
        return TransactionActionRequest.deserialize(bytes);
    }
}
export class WebhookActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): WebhookActionRequest {
        const message = new WebhookActionRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WebhookActionRequest {
        return WebhookActionRequest.deserialize(bytes);
    }
}
