/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.2
 * source: models/core.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as dependency_2 from "./../google/protobuf/any";
import * as pb_1 from "google-protobuf";
export enum DiscountType {
    PERCENT = 0,
    FIXED = 1,
    FREE_SHIPPING = 2,
    BNGN = 3,
    TIER = 4,
    VOLUME = 5,
    BOGO = 6
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        username?: string;
        email?: string;
        shops?: Shop[];
        customers?: Customer[];
    } & (({
        deleted?: dependency_1.Timestamp;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("shops" in data && data.shops != undefined) {
                this.shops = data.shops;
            }
            if ("customers" in data && data.customers != undefined) {
                this.customers = data.customers;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get shops() {
        return pb_1.Message.getRepeatedWrapperField(this, Shop, 8) as Shop[];
    }
    set shops(value: Shop[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get customers() {
        return pb_1.Message.getRepeatedWrapperField(this, Customer, 9) as Customer[];
    }
    set customers(value: Customer[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        username?: string;
        email?: string;
        shops?: ReturnType<typeof Shop.prototype.toObject>[];
        customers?: ReturnType<typeof Customer.prototype.toObject>[];
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.shops != null) {
            message.shops = data.shops.map(item => Shop.fromObject(item));
        }
        if (data.customers != null) {
            message.customers = data.customers.map(item => Customer.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            username?: string;
            email?: string;
            shops?: ReturnType<typeof Shop.prototype.toObject>[];
            customers?: ReturnType<typeof Customer.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.shops != null) {
            data.shops = this.shops.map((item: Shop) => item.toObject());
        }
        if (this.customers != null) {
            data.customers = this.customers.map((item: Customer) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.name.length)
            writer.writeString(5, this.name);
        if (this.username.length)
            writer.writeString(6, this.username);
        if (this.email.length)
            writer.writeString(7, this.email);
        if (this.shops.length)
            writer.writeRepeatedMessage(8, this.shops, (item: Shop) => item.serialize(writer));
        if (this.customers.length)
            writer.writeRepeatedMessage(9, this.customers, (item: Customer) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.name = reader.readString();
                    break;
                case 6:
                    message.username = reader.readString();
                    break;
                case 7:
                    message.email = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.shops, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Shop.deserialize(reader), Shop));
                    break;
                case 9:
                    reader.readMessage(message.customers, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Customer.deserialize(reader), Customer));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class Shop extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        desc?: string;
        currency?: string;
        weightUnit?: string;
        userId?: string;
        products?: Product[];
        locations?: Location[];
        orders?: Order[];
        shippingZones?: ShippingZone[];
        discounts?: Discount[];
        taxConfig?: TaxConfiguration[];
        user?: User;
    } & (({
        deleted?: dependency_1.Timestamp;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 11, 12, 13, 14, 15], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("weightUnit" in data && data.weightUnit != undefined) {
                this.weightUnit = data.weightUnit;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("products" in data && data.products != undefined) {
                this.products = data.products;
            }
            if ("locations" in data && data.locations != undefined) {
                this.locations = data.locations;
            }
            if ("orders" in data && data.orders != undefined) {
                this.orders = data.orders;
            }
            if ("shippingZones" in data && data.shippingZones != undefined) {
                this.shippingZones = data.shippingZones;
            }
            if ("discounts" in data && data.discounts != undefined) {
                this.discounts = data.discounts;
            }
            if ("taxConfig" in data && data.taxConfig != undefined) {
                this.taxConfig = data.taxConfig;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get weightUnit() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set weightUnit(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get products() {
        return pb_1.Message.getRepeatedWrapperField(this, Product, 10) as Product[];
    }
    set products(value: Product[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get locations() {
        return pb_1.Message.getRepeatedWrapperField(this, Location, 11) as Location[];
    }
    set locations(value: Location[]) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    get orders() {
        return pb_1.Message.getRepeatedWrapperField(this, Order, 12) as Order[];
    }
    set orders(value: Order[]) {
        pb_1.Message.setRepeatedWrapperField(this, 12, value);
    }
    get shippingZones() {
        return pb_1.Message.getRepeatedWrapperField(this, ShippingZone, 13) as ShippingZone[];
    }
    set shippingZones(value: ShippingZone[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get discounts() {
        return pb_1.Message.getRepeatedWrapperField(this, Discount, 14) as Discount[];
    }
    set discounts(value: Discount[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get taxConfig() {
        return pb_1.Message.getRepeatedWrapperField(this, TaxConfiguration, 15) as TaxConfiguration[];
    }
    set taxConfig(value: TaxConfiguration[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 16) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get hasUser() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        desc?: string;
        currency?: string;
        weightUnit?: string;
        userId?: string;
        products?: ReturnType<typeof Product.prototype.toObject>[];
        locations?: ReturnType<typeof Location.prototype.toObject>[];
        orders?: ReturnType<typeof Order.prototype.toObject>[];
        shippingZones?: ReturnType<typeof ShippingZone.prototype.toObject>[];
        discounts?: ReturnType<typeof Discount.prototype.toObject>[];
        taxConfig?: ReturnType<typeof TaxConfiguration.prototype.toObject>[];
        user?: ReturnType<typeof User.prototype.toObject>;
    }): Shop {
        const message = new Shop({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.weightUnit != null) {
            message.weightUnit = data.weightUnit;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.products != null) {
            message.products = data.products.map(item => Product.fromObject(item));
        }
        if (data.locations != null) {
            message.locations = data.locations.map(item => Location.fromObject(item));
        }
        if (data.orders != null) {
            message.orders = data.orders.map(item => Order.fromObject(item));
        }
        if (data.shippingZones != null) {
            message.shippingZones = data.shippingZones.map(item => ShippingZone.fromObject(item));
        }
        if (data.discounts != null) {
            message.discounts = data.discounts.map(item => Discount.fromObject(item));
        }
        if (data.taxConfig != null) {
            message.taxConfig = data.taxConfig.map(item => TaxConfiguration.fromObject(item));
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            desc?: string;
            currency?: string;
            weightUnit?: string;
            userId?: string;
            products?: ReturnType<typeof Product.prototype.toObject>[];
            locations?: ReturnType<typeof Location.prototype.toObject>[];
            orders?: ReturnType<typeof Order.prototype.toObject>[];
            shippingZones?: ReturnType<typeof ShippingZone.prototype.toObject>[];
            discounts?: ReturnType<typeof Discount.prototype.toObject>[];
            taxConfig?: ReturnType<typeof TaxConfiguration.prototype.toObject>[];
            user?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.weightUnit != null) {
            data.weightUnit = this.weightUnit;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.products != null) {
            data.products = this.products.map((item: Product) => item.toObject());
        }
        if (this.locations != null) {
            data.locations = this.locations.map((item: Location) => item.toObject());
        }
        if (this.orders != null) {
            data.orders = this.orders.map((item: Order) => item.toObject());
        }
        if (this.shippingZones != null) {
            data.shippingZones = this.shippingZones.map((item: ShippingZone) => item.toObject());
        }
        if (this.discounts != null) {
            data.discounts = this.discounts.map((item: Discount) => item.toObject());
        }
        if (this.taxConfig != null) {
            data.taxConfig = this.taxConfig.map((item: TaxConfiguration) => item.toObject());
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.name.length)
            writer.writeString(5, this.name);
        if (this.desc.length)
            writer.writeString(6, this.desc);
        if (this.currency.length)
            writer.writeString(7, this.currency);
        if (this.weightUnit.length)
            writer.writeString(8, this.weightUnit);
        if (this.userId.length)
            writer.writeString(9, this.userId);
        if (this.products.length)
            writer.writeRepeatedMessage(10, this.products, (item: Product) => item.serialize(writer));
        if (this.locations.length)
            writer.writeRepeatedMessage(11, this.locations, (item: Location) => item.serialize(writer));
        if (this.orders.length)
            writer.writeRepeatedMessage(12, this.orders, (item: Order) => item.serialize(writer));
        if (this.shippingZones.length)
            writer.writeRepeatedMessage(13, this.shippingZones, (item: ShippingZone) => item.serialize(writer));
        if (this.discounts.length)
            writer.writeRepeatedMessage(14, this.discounts, (item: Discount) => item.serialize(writer));
        if (this.taxConfig.length)
            writer.writeRepeatedMessage(15, this.taxConfig, (item: TaxConfiguration) => item.serialize(writer));
        if (this.hasUser)
            writer.writeMessage(16, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Shop {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Shop();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.name = reader.readString();
                    break;
                case 6:
                    message.desc = reader.readString();
                    break;
                case 7:
                    message.currency = reader.readString();
                    break;
                case 8:
                    message.weightUnit = reader.readString();
                    break;
                case 9:
                    message.userId = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Product.deserialize(reader), Product));
                    break;
                case 11:
                    reader.readMessage(message.locations, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Location.deserialize(reader), Location));
                    break;
                case 12:
                    reader.readMessage(message.orders, () => pb_1.Message.addToRepeatedWrapperField(message, 12, Order.deserialize(reader), Order));
                    break;
                case 13:
                    reader.readMessage(message.shippingZones, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ShippingZone.deserialize(reader), ShippingZone));
                    break;
                case 14:
                    reader.readMessage(message.discounts, () => pb_1.Message.addToRepeatedWrapperField(message, 14, Discount.deserialize(reader), Discount));
                    break;
                case 15:
                    reader.readMessage(message.taxConfig, () => pb_1.Message.addToRepeatedWrapperField(message, 15, TaxConfiguration.deserialize(reader), TaxConfiguration));
                    break;
                case 16:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Shop {
        return Shop.deserialize(bytes);
    }
}
export class Channel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        typ?: string;
        active?: boolean;
        shopId?: string;
        shop?: Shop;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("typ" in data && data.typ != undefined) {
                this.typ = data.typ;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get typ() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set typ(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 8) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 8) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        typ?: string;
        active?: boolean;
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
    }): Channel {
        const message = new Channel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.typ != null) {
            message.typ = data.typ;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            typ?: string;
            active?: boolean;
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.typ != null) {
            data.typ = this.typ;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.typ.length)
            writer.writeString(5, this.typ);
        if (this.active != false)
            writer.writeBool(6, this.active);
        if (this.shopId.length)
            writer.writeString(7, this.shopId);
        if (this.hasShop)
            writer.writeMessage(8, this.shop, () => this.shop.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Channel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Channel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.typ = reader.readString();
                    break;
                case 6:
                    message.active = reader.readBool();
                    break;
                case 7:
                    message.shopId = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Channel {
        return Channel.deserialize(bytes);
    }
}
export class ChannelProduct extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        published?: dependency_1.Timestamp;
        active?: boolean;
        override?: number;
        description?: string;
        productId?: string;
        product?: Product;
        channelId?: string;
        channel?: Channel;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("published" in data && data.published != undefined) {
                this.published = data.published;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
            if ("override" in data && data.override != undefined) {
                this.override = data.override;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
            if ("channelId" in data && data.channelId != undefined) {
                this.channelId = data.channelId;
            }
            if ("channel" in data && data.channel != undefined) {
                this.channel = data.channel;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get published() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set published(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasPublished() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get override() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set override(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get product() {
        return pb_1.Message.getWrapperField(this, Product, 7) as Product;
    }
    set product(value: Product) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get channelId() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set channelId(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get channel() {
        return pb_1.Message.getWrapperField(this, Channel, 9) as Channel;
    }
    set channel(value: Channel) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get hasChannel() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data: {
        id?: string;
        published?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        active?: boolean;
        override?: number;
        description?: string;
        productId?: string;
        product?: ReturnType<typeof Product.prototype.toObject>;
        channelId?: string;
        channel?: ReturnType<typeof Channel.prototype.toObject>;
    }): ChannelProduct {
        const message = new ChannelProduct({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.published != null) {
            message.published = dependency_1.Timestamp.fromObject(data.published);
        }
        if (data.active != null) {
            message.active = data.active;
        }
        if (data.override != null) {
            message.override = data.override;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.product != null) {
            message.product = Product.fromObject(data.product);
        }
        if (data.channelId != null) {
            message.channelId = data.channelId;
        }
        if (data.channel != null) {
            message.channel = Channel.fromObject(data.channel);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            published?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            active?: boolean;
            override?: number;
            description?: string;
            productId?: string;
            product?: ReturnType<typeof Product.prototype.toObject>;
            channelId?: string;
            channel?: ReturnType<typeof Channel.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.published != null) {
            data.published = this.published.toObject();
        }
        if (this.active != null) {
            data.active = this.active;
        }
        if (this.override != null) {
            data.override = this.override;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.productId != null) {
            data.productId = this.productId;
        }
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        if (this.channelId != null) {
            data.channelId = this.channelId;
        }
        if (this.channel != null) {
            data.channel = this.channel.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasPublished)
            writer.writeMessage(2, this.published, () => this.published.serialize(writer));
        if (this.active != false)
            writer.writeBool(3, this.active);
        if (this.override != 0)
            writer.writeDouble(4, this.override);
        if (this.description.length)
            writer.writeString(5, this.description);
        if (this.productId.length)
            writer.writeString(6, this.productId);
        if (this.hasProduct)
            writer.writeMessage(7, this.product, () => this.product.serialize(writer));
        if (this.channelId.length)
            writer.writeString(8, this.channelId);
        if (this.hasChannel)
            writer.writeMessage(9, this.channel, () => this.channel.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelProduct {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelProduct();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.published, () => message.published = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.active = reader.readBool();
                    break;
                case 4:
                    message.override = reader.readDouble();
                    break;
                case 5:
                    message.description = reader.readString();
                    break;
                case 6:
                    message.productId = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.product, () => message.product = Product.deserialize(reader));
                    break;
                case 8:
                    message.channelId = reader.readString();
                    break;
                case 9:
                    reader.readMessage(message.channel, () => message.channel = Channel.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelProduct {
        return ChannelProduct.deserialize(bytes);
    }
}
export class Location extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        country?: string;
        state?: string;
        city?: string;
        zip?: string;
        addresses?: string[];
        phone?: string;
        active?: boolean;
        shopId?: string;
        shop?: Shop;
        inventoryLevels?: InventoryLevel[];
        adjustments?: InventoryAdjustment[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 13, 14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("country" in data && data.country != undefined) {
                this.country = data.country;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("city" in data && data.city != undefined) {
                this.city = data.city;
            }
            if ("zip" in data && data.zip != undefined) {
                this.zip = data.zip;
            }
            if ("addresses" in data && data.addresses != undefined) {
                this.addresses = data.addresses;
            }
            if ("phone" in data && data.phone != undefined) {
                this.phone = data.phone;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("inventoryLevels" in data && data.inventoryLevels != undefined) {
                this.inventoryLevels = data.inventoryLevels;
            }
            if ("adjustments" in data && data.adjustments != undefined) {
                this.adjustments = data.adjustments;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get country() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set country(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set state(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get city() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set city(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get zip() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set zip(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get addresses() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
    }
    set addresses(value: string[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get phone() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set phone(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 12) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get inventoryLevels() {
        return pb_1.Message.getRepeatedWrapperField(this, InventoryLevel, 13) as InventoryLevel[];
    }
    set inventoryLevels(value: InventoryLevel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get adjustments() {
        return pb_1.Message.getRepeatedWrapperField(this, InventoryAdjustment, 14) as InventoryAdjustment[];
    }
    set adjustments(value: InventoryAdjustment[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        country?: string;
        state?: string;
        city?: string;
        zip?: string;
        addresses?: string[];
        phone?: string;
        active?: boolean;
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
        inventoryLevels?: ReturnType<typeof InventoryLevel.prototype.toObject>[];
        adjustments?: ReturnType<typeof InventoryAdjustment.prototype.toObject>[];
    }): Location {
        const message = new Location({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.country != null) {
            message.country = data.country;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.city != null) {
            message.city = data.city;
        }
        if (data.zip != null) {
            message.zip = data.zip;
        }
        if (data.addresses != null) {
            message.addresses = data.addresses;
        }
        if (data.phone != null) {
            message.phone = data.phone;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        if (data.inventoryLevels != null) {
            message.inventoryLevels = data.inventoryLevels.map(item => InventoryLevel.fromObject(item));
        }
        if (data.adjustments != null) {
            message.adjustments = data.adjustments.map(item => InventoryAdjustment.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            country?: string;
            state?: string;
            city?: string;
            zip?: string;
            addresses?: string[];
            phone?: string;
            active?: boolean;
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
            inventoryLevels?: ReturnType<typeof InventoryLevel.prototype.toObject>[];
            adjustments?: ReturnType<typeof InventoryAdjustment.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.country != null) {
            data.country = this.country;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.city != null) {
            data.city = this.city;
        }
        if (this.zip != null) {
            data.zip = this.zip;
        }
        if (this.addresses != null) {
            data.addresses = this.addresses;
        }
        if (this.phone != null) {
            data.phone = this.phone;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.inventoryLevels != null) {
            data.inventoryLevels = this.inventoryLevels.map((item: InventoryLevel) => item.toObject());
        }
        if (this.adjustments != null) {
            data.adjustments = this.adjustments.map((item: InventoryAdjustment) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.country.length)
            writer.writeString(4, this.country);
        if (this.state.length)
            writer.writeString(5, this.state);
        if (this.city.length)
            writer.writeString(6, this.city);
        if (this.zip.length)
            writer.writeString(7, this.zip);
        if (this.addresses.length)
            writer.writeRepeatedString(8, this.addresses);
        if (this.phone.length)
            writer.writeString(9, this.phone);
        if (this.active != false)
            writer.writeBool(10, this.active);
        if (this.shopId.length)
            writer.writeString(11, this.shopId);
        if (this.hasShop)
            writer.writeMessage(12, this.shop, () => this.shop.serialize(writer));
        if (this.inventoryLevels.length)
            writer.writeRepeatedMessage(13, this.inventoryLevels, (item: InventoryLevel) => item.serialize(writer));
        if (this.adjustments.length)
            writer.writeRepeatedMessage(14, this.adjustments, (item: InventoryAdjustment) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Location {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Location();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.country = reader.readString();
                    break;
                case 5:
                    message.state = reader.readString();
                    break;
                case 6:
                    message.city = reader.readString();
                    break;
                case 7:
                    message.zip = reader.readString();
                    break;
                case 8:
                    pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                    break;
                case 9:
                    message.phone = reader.readString();
                    break;
                case 10:
                    message.active = reader.readBool();
                    break;
                case 11:
                    message.shopId = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.inventoryLevels, () => pb_1.Message.addToRepeatedWrapperField(message, 13, InventoryLevel.deserialize(reader), InventoryLevel));
                    break;
                case 14:
                    reader.readMessage(message.adjustments, () => pb_1.Message.addToRepeatedWrapperField(message, 14, InventoryAdjustment.deserialize(reader), InventoryAdjustment));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Location {
        return Location.deserialize(bytes);
    }
}
export class Product extends pb_1.Message {
    #one_of_decls: number[][] = [[4], [5]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        archived?: dependency_1.Timestamp;
        status?: ProductProductStatus;
        title?: string;
        type?: string;
        tags?: string[];
        shopId?: string;
        shop?: Shop;
        variants?: ProductVariant[];
        images?: ProductImage[];
        options?: ProductOption[];
        lineItems?: LineItem[];
        collections?: CollectionProduct[];
        channels?: ChannelProduct[];
    } & (({
        deleted?: dependency_1.Timestamp;
    }) | ({
        published?: dependency_1.Timestamp;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 13, 14, 15, 16, 17, 18], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("published" in data && data.published != undefined) {
                this.published = data.published;
            }
            if ("archived" in data && data.archived != undefined) {
                this.archived = data.archived;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("variants" in data && data.variants != undefined) {
                this.variants = data.variants;
            }
            if ("images" in data && data.images != undefined) {
                this.images = data.images;
            }
            if ("options" in data && data.options != undefined) {
                this.options = data.options;
            }
            if ("lineItems" in data && data.lineItems != undefined) {
                this.lineItems = data.lineItems;
            }
            if ("collections" in data && data.collections != undefined) {
                this.collections = data.collections;
            }
            if ("channels" in data && data.channels != undefined) {
                this.channels = data.channels;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get published() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set published(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[1], value);
    }
    get hasPublished() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get archived() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 6) as dependency_1.Timestamp;
    }
    set archived(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasArchived() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, ProductProductStatus.DRAFT) as ProductProductStatus;
    }
    set status(value: ProductProductStatus) {
        pb_1.Message.setField(this, 7, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
    }
    set tags(value: string[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 12) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get variants() {
        return pb_1.Message.getRepeatedWrapperField(this, ProductVariant, 13) as ProductVariant[];
    }
    set variants(value: ProductVariant[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get images() {
        return pb_1.Message.getRepeatedWrapperField(this, ProductImage, 14) as ProductImage[];
    }
    set images(value: ProductImage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get options() {
        return pb_1.Message.getRepeatedWrapperField(this, ProductOption, 15) as ProductOption[];
    }
    set options(value: ProductOption[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get lineItems() {
        return pb_1.Message.getRepeatedWrapperField(this, LineItem, 16) as LineItem[];
    }
    set lineItems(value: LineItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 16, value);
    }
    get collections() {
        return pb_1.Message.getRepeatedWrapperField(this, CollectionProduct, 17) as CollectionProduct[];
    }
    set collections(value: CollectionProduct[]) {
        pb_1.Message.setRepeatedWrapperField(this, 17, value);
    }
    get channels() {
        return pb_1.Message.getRepeatedWrapperField(this, ChannelProduct, 18) as ChannelProduct[];
    }
    set channels(value: ChannelProduct[]) {
        pb_1.Message.setRepeatedWrapperField(this, 18, value);
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _published() {
        const cases: {
            [index: number]: "none" | "published";
        } = {
            0: "none",
            5: "published"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        published?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        archived?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        status?: ProductProductStatus;
        title?: string;
        type?: string;
        tags?: string[];
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
        variants?: ReturnType<typeof ProductVariant.prototype.toObject>[];
        images?: ReturnType<typeof ProductImage.prototype.toObject>[];
        options?: ReturnType<typeof ProductOption.prototype.toObject>[];
        lineItems?: ReturnType<typeof LineItem.prototype.toObject>[];
        collections?: ReturnType<typeof CollectionProduct.prototype.toObject>[];
        channels?: ReturnType<typeof ChannelProduct.prototype.toObject>[];
    }): Product {
        const message = new Product({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.published != null) {
            message.published = dependency_1.Timestamp.fromObject(data.published);
        }
        if (data.archived != null) {
            message.archived = dependency_1.Timestamp.fromObject(data.archived);
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        if (data.variants != null) {
            message.variants = data.variants.map(item => ProductVariant.fromObject(item));
        }
        if (data.images != null) {
            message.images = data.images.map(item => ProductImage.fromObject(item));
        }
        if (data.options != null) {
            message.options = data.options.map(item => ProductOption.fromObject(item));
        }
        if (data.lineItems != null) {
            message.lineItems = data.lineItems.map(item => LineItem.fromObject(item));
        }
        if (data.collections != null) {
            message.collections = data.collections.map(item => CollectionProduct.fromObject(item));
        }
        if (data.channels != null) {
            message.channels = data.channels.map(item => ChannelProduct.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            published?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            archived?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            status?: ProductProductStatus;
            title?: string;
            type?: string;
            tags?: string[];
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
            variants?: ReturnType<typeof ProductVariant.prototype.toObject>[];
            images?: ReturnType<typeof ProductImage.prototype.toObject>[];
            options?: ReturnType<typeof ProductOption.prototype.toObject>[];
            lineItems?: ReturnType<typeof LineItem.prototype.toObject>[];
            collections?: ReturnType<typeof CollectionProduct.prototype.toObject>[];
            channels?: ReturnType<typeof ChannelProduct.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.published != null) {
            data.published = this.published.toObject();
        }
        if (this.archived != null) {
            data.archived = this.archived.toObject();
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.variants != null) {
            data.variants = this.variants.map((item: ProductVariant) => item.toObject());
        }
        if (this.images != null) {
            data.images = this.images.map((item: ProductImage) => item.toObject());
        }
        if (this.options != null) {
            data.options = this.options.map((item: ProductOption) => item.toObject());
        }
        if (this.lineItems != null) {
            data.lineItems = this.lineItems.map((item: LineItem) => item.toObject());
        }
        if (this.collections != null) {
            data.collections = this.collections.map((item: CollectionProduct) => item.toObject());
        }
        if (this.channels != null) {
            data.channels = this.channels.map((item: ChannelProduct) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.hasPublished)
            writer.writeMessage(5, this.published, () => this.published.serialize(writer));
        if (this.hasArchived)
            writer.writeMessage(6, this.archived, () => this.archived.serialize(writer));
        if (this.status != ProductProductStatus.DRAFT)
            writer.writeEnum(7, this.status);
        if (this.title.length)
            writer.writeString(8, this.title);
        if (this.type.length)
            writer.writeString(9, this.type);
        if (this.tags.length)
            writer.writeRepeatedString(10, this.tags);
        if (this.shopId.length)
            writer.writeString(11, this.shopId);
        if (this.hasShop)
            writer.writeMessage(12, this.shop, () => this.shop.serialize(writer));
        if (this.variants.length)
            writer.writeRepeatedMessage(13, this.variants, (item: ProductVariant) => item.serialize(writer));
        if (this.images.length)
            writer.writeRepeatedMessage(14, this.images, (item: ProductImage) => item.serialize(writer));
        if (this.options.length)
            writer.writeRepeatedMessage(15, this.options, (item: ProductOption) => item.serialize(writer));
        if (this.lineItems.length)
            writer.writeRepeatedMessage(16, this.lineItems, (item: LineItem) => item.serialize(writer));
        if (this.collections.length)
            writer.writeRepeatedMessage(17, this.collections, (item: CollectionProduct) => item.serialize(writer));
        if (this.channels.length)
            writer.writeRepeatedMessage(18, this.channels, (item: ChannelProduct) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Product {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Product();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.published, () => message.published = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.archived, () => message.archived = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 7:
                    message.status = reader.readEnum();
                    break;
                case 8:
                    message.title = reader.readString();
                    break;
                case 9:
                    message.type = reader.readString();
                    break;
                case 10:
                    pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                    break;
                case 11:
                    message.shopId = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.variants, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ProductVariant.deserialize(reader), ProductVariant));
                    break;
                case 14:
                    reader.readMessage(message.images, () => pb_1.Message.addToRepeatedWrapperField(message, 14, ProductImage.deserialize(reader), ProductImage));
                    break;
                case 15:
                    reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 15, ProductOption.deserialize(reader), ProductOption));
                    break;
                case 16:
                    reader.readMessage(message.lineItems, () => pb_1.Message.addToRepeatedWrapperField(message, 16, LineItem.deserialize(reader), LineItem));
                    break;
                case 17:
                    reader.readMessage(message.collections, () => pb_1.Message.addToRepeatedWrapperField(message, 17, CollectionProduct.deserialize(reader), CollectionProduct));
                    break;
                case 18:
                    reader.readMessage(message.channels, () => pb_1.Message.addToRepeatedWrapperField(message, 18, ChannelProduct.deserialize(reader), ChannelProduct));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Product {
        return Product.deserialize(bytes);
    }
}
export enum ProductProductStatus {
    DRAFT = 0,
    ACTIVE = 1,
    INACTIVE = 2,
    ARCHIVED = 3,
    OUT_OF_STOCK = 4,
    DISCONTINUE = 5,
    PREORDER = 6,
    BACKORDER = 7
}
export class ProductVariant extends pb_1.Message {
    #one_of_decls: number[][] = [[4], [18]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        title?: string;
        sku?: string;
        barcode?: string;
        position?: number;
        taxable?: boolean;
        reqShipping?: boolean;
        price?: number;
        quantity?: number;
        weight?: number;
        weightUnit?: string;
        productId?: string;
        product?: Product;
        lineItems?: LineItem[];
    } & (({
        deleted?: dependency_1.Timestamp;
    }) | ({
        inventoryItem?: InventoryItem;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("sku" in data && data.sku != undefined) {
                this.sku = data.sku;
            }
            if ("barcode" in data && data.barcode != undefined) {
                this.barcode = data.barcode;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("taxable" in data && data.taxable != undefined) {
                this.taxable = data.taxable;
            }
            if ("reqShipping" in data && data.reqShipping != undefined) {
                this.reqShipping = data.reqShipping;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("weight" in data && data.weight != undefined) {
                this.weight = data.weight;
            }
            if ("weightUnit" in data && data.weightUnit != undefined) {
                this.weightUnit = data.weightUnit;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
            if ("lineItems" in data && data.lineItems != undefined) {
                this.lineItems = data.lineItems;
            }
            if ("inventoryItem" in data && data.inventoryItem != undefined) {
                this.inventoryItem = data.inventoryItem;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get sku() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set sku(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get barcode() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set barcode(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get taxable() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set taxable(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get reqShipping() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set reqShipping(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get weight() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set weight(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get weightUnit() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set weightUnit(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get product() {
        return pb_1.Message.getWrapperField(this, Product, 16) as Product;
    }
    set product(value: Product) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get lineItems() {
        return pb_1.Message.getRepeatedWrapperField(this, LineItem, 17) as LineItem[];
    }
    set lineItems(value: LineItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 17, value);
    }
    get inventoryItem() {
        return pb_1.Message.getWrapperField(this, InventoryItem, 18) as InventoryItem;
    }
    set inventoryItem(value: InventoryItem) {
        pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[1], value);
    }
    get hasInventoryItem() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _inventoryItem() {
        const cases: {
            [index: number]: "none" | "inventoryItem";
        } = {
            0: "none",
            18: "inventoryItem"
        };
        return cases[pb_1.Message.computeOneofCase(this, [18])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        title?: string;
        sku?: string;
        barcode?: string;
        position?: number;
        taxable?: boolean;
        reqShipping?: boolean;
        price?: number;
        quantity?: number;
        weight?: number;
        weightUnit?: string;
        productId?: string;
        product?: ReturnType<typeof Product.prototype.toObject>;
        lineItems?: ReturnType<typeof LineItem.prototype.toObject>[];
        inventoryItem?: ReturnType<typeof InventoryItem.prototype.toObject>;
    }): ProductVariant {
        const message = new ProductVariant({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.sku != null) {
            message.sku = data.sku;
        }
        if (data.barcode != null) {
            message.barcode = data.barcode;
        }
        if (data.position != null) {
            message.position = data.position;
        }
        if (data.taxable != null) {
            message.taxable = data.taxable;
        }
        if (data.reqShipping != null) {
            message.reqShipping = data.reqShipping;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.weight != null) {
            message.weight = data.weight;
        }
        if (data.weightUnit != null) {
            message.weightUnit = data.weightUnit;
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.product != null) {
            message.product = Product.fromObject(data.product);
        }
        if (data.lineItems != null) {
            message.lineItems = data.lineItems.map(item => LineItem.fromObject(item));
        }
        if (data.inventoryItem != null) {
            message.inventoryItem = InventoryItem.fromObject(data.inventoryItem);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            title?: string;
            sku?: string;
            barcode?: string;
            position?: number;
            taxable?: boolean;
            reqShipping?: boolean;
            price?: number;
            quantity?: number;
            weight?: number;
            weightUnit?: string;
            productId?: string;
            product?: ReturnType<typeof Product.prototype.toObject>;
            lineItems?: ReturnType<typeof LineItem.prototype.toObject>[];
            inventoryItem?: ReturnType<typeof InventoryItem.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.sku != null) {
            data.sku = this.sku;
        }
        if (this.barcode != null) {
            data.barcode = this.barcode;
        }
        if (this.position != null) {
            data.position = this.position;
        }
        if (this.taxable != null) {
            data.taxable = this.taxable;
        }
        if (this.reqShipping != null) {
            data.reqShipping = this.reqShipping;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.weight != null) {
            data.weight = this.weight;
        }
        if (this.weightUnit != null) {
            data.weightUnit = this.weightUnit;
        }
        if (this.productId != null) {
            data.productId = this.productId;
        }
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        if (this.lineItems != null) {
            data.lineItems = this.lineItems.map((item: LineItem) => item.toObject());
        }
        if (this.inventoryItem != null) {
            data.inventoryItem = this.inventoryItem.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.title.length)
            writer.writeString(5, this.title);
        if (this.sku.length)
            writer.writeString(6, this.sku);
        if (this.barcode.length)
            writer.writeString(7, this.barcode);
        if (this.position != 0)
            writer.writeInt32(8, this.position);
        if (this.taxable != false)
            writer.writeBool(9, this.taxable);
        if (this.reqShipping != false)
            writer.writeBool(10, this.reqShipping);
        if (this.price != 0)
            writer.writeDouble(11, this.price);
        if (this.quantity != 0)
            writer.writeInt32(12, this.quantity);
        if (this.weight != 0)
            writer.writeDouble(13, this.weight);
        if (this.weightUnit.length)
            writer.writeString(14, this.weightUnit);
        if (this.productId.length)
            writer.writeString(15, this.productId);
        if (this.hasProduct)
            writer.writeMessage(16, this.product, () => this.product.serialize(writer));
        if (this.lineItems.length)
            writer.writeRepeatedMessage(17, this.lineItems, (item: LineItem) => item.serialize(writer));
        if (this.hasInventoryItem)
            writer.writeMessage(18, this.inventoryItem, () => this.inventoryItem.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductVariant {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductVariant();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.title = reader.readString();
                    break;
                case 6:
                    message.sku = reader.readString();
                    break;
                case 7:
                    message.barcode = reader.readString();
                    break;
                case 8:
                    message.position = reader.readInt32();
                    break;
                case 9:
                    message.taxable = reader.readBool();
                    break;
                case 10:
                    message.reqShipping = reader.readBool();
                    break;
                case 11:
                    message.price = reader.readDouble();
                    break;
                case 12:
                    message.quantity = reader.readInt32();
                    break;
                case 13:
                    message.weight = reader.readDouble();
                    break;
                case 14:
                    message.weightUnit = reader.readString();
                    break;
                case 15:
                    message.productId = reader.readString();
                    break;
                case 16:
                    reader.readMessage(message.product, () => message.product = Product.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.lineItems, () => pb_1.Message.addToRepeatedWrapperField(message, 17, LineItem.deserialize(reader), LineItem));
                    break;
                case 18:
                    reader.readMessage(message.inventoryItem, () => message.inventoryItem = InventoryItem.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductVariant {
        return ProductVariant.deserialize(bytes);
    }
}
export class ProductImage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        url?: string;
        altText?: string;
        position?: number;
        productId?: string;
        product?: Product;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("altText" in data && data.altText != undefined) {
                this.altText = data.altText;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get altText() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set altText(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get product() {
        return pb_1.Message.getWrapperField(this, Product, 6) as Product;
    }
    set product(value: Product) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        id?: string;
        url?: string;
        altText?: string;
        position?: number;
        productId?: string;
        product?: ReturnType<typeof Product.prototype.toObject>;
    }): ProductImage {
        const message = new ProductImage({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.altText != null) {
            message.altText = data.altText;
        }
        if (data.position != null) {
            message.position = data.position;
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.product != null) {
            message.product = Product.fromObject(data.product);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            url?: string;
            altText?: string;
            position?: number;
            productId?: string;
            product?: ReturnType<typeof Product.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.url != null) {
            data.url = this.url;
        }
        if (this.altText != null) {
            data.altText = this.altText;
        }
        if (this.position != null) {
            data.position = this.position;
        }
        if (this.productId != null) {
            data.productId = this.productId;
        }
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.url.length)
            writer.writeString(2, this.url);
        if (this.altText.length)
            writer.writeString(3, this.altText);
        if (this.position != 0)
            writer.writeInt32(4, this.position);
        if (this.productId.length)
            writer.writeString(5, this.productId);
        if (this.hasProduct)
            writer.writeMessage(6, this.product, () => this.product.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductImage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductImage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.url = reader.readString();
                    break;
                case 3:
                    message.altText = reader.readString();
                    break;
                case 4:
                    message.position = reader.readInt32();
                    break;
                case 5:
                    message.productId = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.product, () => message.product = Product.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductImage {
        return ProductImage.deserialize(bytes);
    }
}
export class ProductOption extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        position?: number;
        values?: string[];
        productId?: string;
        product?: Product;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("values" in data && data.values != undefined) {
                this.values = data.values;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get values() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set values(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get product() {
        return pb_1.Message.getWrapperField(this, Product, 6) as Product;
    }
    set product(value: Product) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        position?: number;
        values?: string[];
        productId?: string;
        product?: ReturnType<typeof Product.prototype.toObject>;
    }): ProductOption {
        const message = new ProductOption({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.position != null) {
            message.position = data.position;
        }
        if (data.values != null) {
            message.values = data.values;
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.product != null) {
            message.product = Product.fromObject(data.product);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            position?: number;
            values?: string[];
            productId?: string;
            product?: ReturnType<typeof Product.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.position != null) {
            data.position = this.position;
        }
        if (this.values != null) {
            data.values = this.values;
        }
        if (this.productId != null) {
            data.productId = this.productId;
        }
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.position != 0)
            writer.writeInt32(3, this.position);
        if (this.values.length)
            writer.writeRepeatedString(4, this.values);
        if (this.productId.length)
            writer.writeString(5, this.productId);
        if (this.hasProduct)
            writer.writeMessage(6, this.product, () => this.product.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductOption {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductOption();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.position = reader.readInt32();
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                case 5:
                    message.productId = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.product, () => message.product = Product.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductOption {
        return ProductOption.deserialize(bytes);
    }
}
export class Customer extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        fullName?: string;
        email?: string;
        phone?: string;
        tags?: string[];
        note?: string;
        taxExempt?: boolean;
        ownerId?: string;
        orders?: Order[];
        addresses?: CustomerAddress[];
        owner?: User;
    } & (({
        deleted?: dependency_1.Timestamp;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 12, 13], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("fullName" in data && data.fullName != undefined) {
                this.fullName = data.fullName;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("phone" in data && data.phone != undefined) {
                this.phone = data.phone;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
            if ("note" in data && data.note != undefined) {
                this.note = data.note;
            }
            if ("taxExempt" in data && data.taxExempt != undefined) {
                this.taxExempt = data.taxExempt;
            }
            if ("ownerId" in data && data.ownerId != undefined) {
                this.ownerId = data.ownerId;
            }
            if ("orders" in data && data.orders != undefined) {
                this.orders = data.orders;
            }
            if ("addresses" in data && data.addresses != undefined) {
                this.addresses = data.addresses;
            }
            if ("owner" in data && data.owner != undefined) {
                this.owner = data.owner;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get fullName() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set fullName(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get phone() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set phone(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
    }
    set tags(value: string[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get note() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set note(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get taxExempt() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set taxExempt(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get ownerId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set ownerId(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get orders() {
        return pb_1.Message.getRepeatedWrapperField(this, Order, 12) as Order[];
    }
    set orders(value: Order[]) {
        pb_1.Message.setRepeatedWrapperField(this, 12, value);
    }
    get addresses() {
        return pb_1.Message.getRepeatedWrapperField(this, CustomerAddress, 13) as CustomerAddress[];
    }
    set addresses(value: CustomerAddress[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get owner() {
        return pb_1.Message.getWrapperField(this, User, 14) as User;
    }
    set owner(value: User) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get hasOwner() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        fullName?: string;
        email?: string;
        phone?: string;
        tags?: string[];
        note?: string;
        taxExempt?: boolean;
        ownerId?: string;
        orders?: ReturnType<typeof Order.prototype.toObject>[];
        addresses?: ReturnType<typeof CustomerAddress.prototype.toObject>[];
        owner?: ReturnType<typeof User.prototype.toObject>;
    }): Customer {
        const message = new Customer({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.fullName != null) {
            message.fullName = data.fullName;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.phone != null) {
            message.phone = data.phone;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        if (data.note != null) {
            message.note = data.note;
        }
        if (data.taxExempt != null) {
            message.taxExempt = data.taxExempt;
        }
        if (data.ownerId != null) {
            message.ownerId = data.ownerId;
        }
        if (data.orders != null) {
            message.orders = data.orders.map(item => Order.fromObject(item));
        }
        if (data.addresses != null) {
            message.addresses = data.addresses.map(item => CustomerAddress.fromObject(item));
        }
        if (data.owner != null) {
            message.owner = User.fromObject(data.owner);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            fullName?: string;
            email?: string;
            phone?: string;
            tags?: string[];
            note?: string;
            taxExempt?: boolean;
            ownerId?: string;
            orders?: ReturnType<typeof Order.prototype.toObject>[];
            addresses?: ReturnType<typeof CustomerAddress.prototype.toObject>[];
            owner?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.fullName != null) {
            data.fullName = this.fullName;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.phone != null) {
            data.phone = this.phone;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        if (this.note != null) {
            data.note = this.note;
        }
        if (this.taxExempt != null) {
            data.taxExempt = this.taxExempt;
        }
        if (this.ownerId != null) {
            data.ownerId = this.ownerId;
        }
        if (this.orders != null) {
            data.orders = this.orders.map((item: Order) => item.toObject());
        }
        if (this.addresses != null) {
            data.addresses = this.addresses.map((item: CustomerAddress) => item.toObject());
        }
        if (this.owner != null) {
            data.owner = this.owner.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.fullName.length)
            writer.writeString(5, this.fullName);
        if (this.email.length)
            writer.writeString(6, this.email);
        if (this.phone.length)
            writer.writeString(7, this.phone);
        if (this.tags.length)
            writer.writeRepeatedString(8, this.tags);
        if (this.note.length)
            writer.writeString(9, this.note);
        if (this.taxExempt != false)
            writer.writeBool(10, this.taxExempt);
        if (this.ownerId.length)
            writer.writeString(11, this.ownerId);
        if (this.orders.length)
            writer.writeRepeatedMessage(12, this.orders, (item: Order) => item.serialize(writer));
        if (this.addresses.length)
            writer.writeRepeatedMessage(13, this.addresses, (item: CustomerAddress) => item.serialize(writer));
        if (this.hasOwner)
            writer.writeMessage(14, this.owner, () => this.owner.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Customer {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Customer();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.fullName = reader.readString();
                    break;
                case 6:
                    message.email = reader.readString();
                    break;
                case 7:
                    message.phone = reader.readString();
                    break;
                case 8:
                    pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                    break;
                case 9:
                    message.note = reader.readString();
                    break;
                case 10:
                    message.taxExempt = reader.readBool();
                    break;
                case 11:
                    message.ownerId = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.orders, () => pb_1.Message.addToRepeatedWrapperField(message, 12, Order.deserialize(reader), Order));
                    break;
                case 13:
                    reader.readMessage(message.addresses, () => pb_1.Message.addToRepeatedWrapperField(message, 13, CustomerAddress.deserialize(reader), CustomerAddress));
                    break;
                case 14:
                    reader.readMessage(message.owner, () => message.owner = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Customer {
        return Customer.deserialize(bytes);
    }
}
export class CustomerAddress extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        company?: string;
        country?: string;
        state?: string;
        city?: string;
        zip?: string;
        addresses?: string[];
        phone?: string;
        customerId?: string;
        customer?: Customer;
        orderShippings?: Order[];
        orderBills?: Order[];
        position?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 14, 15], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("company" in data && data.company != undefined) {
                this.company = data.company;
            }
            if ("country" in data && data.country != undefined) {
                this.country = data.country;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("city" in data && data.city != undefined) {
                this.city = data.city;
            }
            if ("zip" in data && data.zip != undefined) {
                this.zip = data.zip;
            }
            if ("addresses" in data && data.addresses != undefined) {
                this.addresses = data.addresses;
            }
            if ("phone" in data && data.phone != undefined) {
                this.phone = data.phone;
            }
            if ("customerId" in data && data.customerId != undefined) {
                this.customerId = data.customerId;
            }
            if ("customer" in data && data.customer != undefined) {
                this.customer = data.customer;
            }
            if ("orderShippings" in data && data.orderShippings != undefined) {
                this.orderShippings = data.orderShippings;
            }
            if ("orderBills" in data && data.orderBills != undefined) {
                this.orderBills = data.orderBills;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get company() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set company(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get country() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set country(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set state(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get city() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set city(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get zip() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set zip(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get addresses() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
    }
    set addresses(value: string[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get phone() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set phone(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get customerId() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set customerId(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get customer() {
        return pb_1.Message.getWrapperField(this, Customer, 13) as Customer;
    }
    set customer(value: Customer) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get hasCustomer() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get orderShippings() {
        return pb_1.Message.getRepeatedWrapperField(this, Order, 14) as Order[];
    }
    set orderShippings(value: Order[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get orderBills() {
        return pb_1.Message.getRepeatedWrapperField(this, Order, 15) as Order[];
    }
    set orderBills(value: Order[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        company?: string;
        country?: string;
        state?: string;
        city?: string;
        zip?: string;
        addresses?: string[];
        phone?: string;
        customerId?: string;
        customer?: ReturnType<typeof Customer.prototype.toObject>;
        orderShippings?: ReturnType<typeof Order.prototype.toObject>[];
        orderBills?: ReturnType<typeof Order.prototype.toObject>[];
        position?: number;
    }): CustomerAddress {
        const message = new CustomerAddress({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.company != null) {
            message.company = data.company;
        }
        if (data.country != null) {
            message.country = data.country;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.city != null) {
            message.city = data.city;
        }
        if (data.zip != null) {
            message.zip = data.zip;
        }
        if (data.addresses != null) {
            message.addresses = data.addresses;
        }
        if (data.phone != null) {
            message.phone = data.phone;
        }
        if (data.customerId != null) {
            message.customerId = data.customerId;
        }
        if (data.customer != null) {
            message.customer = Customer.fromObject(data.customer);
        }
        if (data.orderShippings != null) {
            message.orderShippings = data.orderShippings.map(item => Order.fromObject(item));
        }
        if (data.orderBills != null) {
            message.orderBills = data.orderBills.map(item => Order.fromObject(item));
        }
        if (data.position != null) {
            message.position = data.position;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            company?: string;
            country?: string;
            state?: string;
            city?: string;
            zip?: string;
            addresses?: string[];
            phone?: string;
            customerId?: string;
            customer?: ReturnType<typeof Customer.prototype.toObject>;
            orderShippings?: ReturnType<typeof Order.prototype.toObject>[];
            orderBills?: ReturnType<typeof Order.prototype.toObject>[];
            position?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.company != null) {
            data.company = this.company;
        }
        if (this.country != null) {
            data.country = this.country;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.city != null) {
            data.city = this.city;
        }
        if (this.zip != null) {
            data.zip = this.zip;
        }
        if (this.addresses != null) {
            data.addresses = this.addresses;
        }
        if (this.phone != null) {
            data.phone = this.phone;
        }
        if (this.customerId != null) {
            data.customerId = this.customerId;
        }
        if (this.customer != null) {
            data.customer = this.customer.toObject();
        }
        if (this.orderShippings != null) {
            data.orderShippings = this.orderShippings.map((item: Order) => item.toObject());
        }
        if (this.orderBills != null) {
            data.orderBills = this.orderBills.map((item: Order) => item.toObject());
        }
        if (this.position != null) {
            data.position = this.position;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.company.length)
            writer.writeString(5, this.company);
        if (this.country.length)
            writer.writeString(6, this.country);
        if (this.state.length)
            writer.writeString(7, this.state);
        if (this.city.length)
            writer.writeString(8, this.city);
        if (this.zip.length)
            writer.writeString(9, this.zip);
        if (this.addresses.length)
            writer.writeRepeatedString(10, this.addresses);
        if (this.phone.length)
            writer.writeString(11, this.phone);
        if (this.customerId.length)
            writer.writeString(12, this.customerId);
        if (this.hasCustomer)
            writer.writeMessage(13, this.customer, () => this.customer.serialize(writer));
        if (this.orderShippings.length)
            writer.writeRepeatedMessage(14, this.orderShippings, (item: Order) => item.serialize(writer));
        if (this.orderBills.length)
            writer.writeRepeatedMessage(15, this.orderBills, (item: Order) => item.serialize(writer));
        if (this.position != 0)
            writer.writeInt32(16, this.position);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerAddress {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerAddress();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.company = reader.readString();
                    break;
                case 6:
                    message.country = reader.readString();
                    break;
                case 7:
                    message.state = reader.readString();
                    break;
                case 8:
                    message.city = reader.readString();
                    break;
                case 9:
                    message.zip = reader.readString();
                    break;
                case 10:
                    pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                    break;
                case 11:
                    message.phone = reader.readString();
                    break;
                case 12:
                    message.customerId = reader.readString();
                    break;
                case 13:
                    reader.readMessage(message.customer, () => message.customer = Customer.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.orderShippings, () => pb_1.Message.addToRepeatedWrapperField(message, 14, Order.deserialize(reader), Order));
                    break;
                case 15:
                    reader.readMessage(message.orderBills, () => pb_1.Message.addToRepeatedWrapperField(message, 15, Order.deserialize(reader), Order));
                    break;
                case 16:
                    message.position = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomerAddress {
        return CustomerAddress.deserialize(bytes);
    }
}
export class Order extends pb_1.Message {
    #one_of_decls: number[][] = [[4], [5], [20], [24], [25], [26], [32], [33]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        closed?: dependency_1.Timestamp;
        status?: OrderOrderStatus;
        fulfillmentStatus?: FulfillmentFulfillmentStatus;
        orderNumber?: string;
        tags?: string[];
        note?: string;
        currency?: string;
        totalPrice?: number;
        subtotal?: number;
        totalTax?: number;
        totalShippingPrice?: number;
        shippingFee?: number;
        cancelReason?: string;
        shopId?: string;
        shippingAddressId?: string;
        billingAddressId?: string;
        shop?: Shop;
        transactions?: TransactionOrder[];
        fulfillments?: Fulfillment[];
        items?: LineItem[];
        discountUsage?: DiscountUsage[];
        taxes?: TaxLine[];
        adjustments?: InventoryAdjustment[];
    } & (({
        deleted?: dependency_1.Timestamp;
    }) | ({
        cancelled?: dependency_1.Timestamp;
    }) | ({
        customerId?: string;
    }) | ({
        customer?: Customer;
    }) | ({
        shippingAddress?: CustomerAddress;
    }) | ({
        billingAddress?: CustomerAddress;
    }) | ({
        channelId?: string;
    }) | ({
        channel?: Channel;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 27, 28, 29, 30, 31, 34], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("cancelled" in data && data.cancelled != undefined) {
                this.cancelled = data.cancelled;
            }
            if ("closed" in data && data.closed != undefined) {
                this.closed = data.closed;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("fulfillmentStatus" in data && data.fulfillmentStatus != undefined) {
                this.fulfillmentStatus = data.fulfillmentStatus;
            }
            if ("orderNumber" in data && data.orderNumber != undefined) {
                this.orderNumber = data.orderNumber;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
            if ("note" in data && data.note != undefined) {
                this.note = data.note;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("totalPrice" in data && data.totalPrice != undefined) {
                this.totalPrice = data.totalPrice;
            }
            if ("subtotal" in data && data.subtotal != undefined) {
                this.subtotal = data.subtotal;
            }
            if ("totalTax" in data && data.totalTax != undefined) {
                this.totalTax = data.totalTax;
            }
            if ("totalShippingPrice" in data && data.totalShippingPrice != undefined) {
                this.totalShippingPrice = data.totalShippingPrice;
            }
            if ("shippingFee" in data && data.shippingFee != undefined) {
                this.shippingFee = data.shippingFee;
            }
            if ("cancelReason" in data && data.cancelReason != undefined) {
                this.cancelReason = data.cancelReason;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("customerId" in data && data.customerId != undefined) {
                this.customerId = data.customerId;
            }
            if ("shippingAddressId" in data && data.shippingAddressId != undefined) {
                this.shippingAddressId = data.shippingAddressId;
            }
            if ("billingAddressId" in data && data.billingAddressId != undefined) {
                this.billingAddressId = data.billingAddressId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("customer" in data && data.customer != undefined) {
                this.customer = data.customer;
            }
            if ("shippingAddress" in data && data.shippingAddress != undefined) {
                this.shippingAddress = data.shippingAddress;
            }
            if ("billingAddress" in data && data.billingAddress != undefined) {
                this.billingAddress = data.billingAddress;
            }
            if ("transactions" in data && data.transactions != undefined) {
                this.transactions = data.transactions;
            }
            if ("fulfillments" in data && data.fulfillments != undefined) {
                this.fulfillments = data.fulfillments;
            }
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
            if ("discountUsage" in data && data.discountUsage != undefined) {
                this.discountUsage = data.discountUsage;
            }
            if ("taxes" in data && data.taxes != undefined) {
                this.taxes = data.taxes;
            }
            if ("channelId" in data && data.channelId != undefined) {
                this.channelId = data.channelId;
            }
            if ("channel" in data && data.channel != undefined) {
                this.channel = data.channel;
            }
            if ("adjustments" in data && data.adjustments != undefined) {
                this.adjustments = data.adjustments;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get cancelled() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set cancelled(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[1], value);
    }
    get hasCancelled() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get closed() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 6) as dependency_1.Timestamp;
    }
    set closed(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasClosed() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, OrderOrderStatus.PENDING) as OrderOrderStatus;
    }
    set status(value: OrderOrderStatus) {
        pb_1.Message.setField(this, 7, value);
    }
    get fulfillmentStatus() {
        return pb_1.Message.getFieldWithDefault(this, 8, FulfillmentFulfillmentStatus.PENDING) as FulfillmentFulfillmentStatus;
    }
    set fulfillmentStatus(value: FulfillmentFulfillmentStatus) {
        pb_1.Message.setField(this, 8, value);
    }
    get orderNumber() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set orderNumber(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
    }
    set tags(value: string[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get note() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set note(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get totalPrice() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set totalPrice(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get subtotal() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set subtotal(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get totalTax() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set totalTax(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get totalShippingPrice() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set totalShippingPrice(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get shippingFee() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set shippingFee(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get cancelReason() {
        return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
    }
    set cancelReason(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get customerId() {
        return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
    }
    set customerId(value: string) {
        pb_1.Message.setOneofField(this, 20, this.#one_of_decls[2], value);
    }
    get hasCustomerId() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get shippingAddressId() {
        return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
    }
    set shippingAddressId(value: string) {
        pb_1.Message.setField(this, 21, value);
    }
    get billingAddressId() {
        return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
    }
    set billingAddressId(value: string) {
        pb_1.Message.setField(this, 22, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 23) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 23, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 23) != null;
    }
    get customer() {
        return pb_1.Message.getWrapperField(this, Customer, 24) as Customer;
    }
    set customer(value: Customer) {
        pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[3], value);
    }
    get hasCustomer() {
        return pb_1.Message.getField(this, 24) != null;
    }
    get shippingAddress() {
        return pb_1.Message.getWrapperField(this, CustomerAddress, 25) as CustomerAddress;
    }
    set shippingAddress(value: CustomerAddress) {
        pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[4], value);
    }
    get hasShippingAddress() {
        return pb_1.Message.getField(this, 25) != null;
    }
    get billingAddress() {
        return pb_1.Message.getWrapperField(this, CustomerAddress, 26) as CustomerAddress;
    }
    set billingAddress(value: CustomerAddress) {
        pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[5], value);
    }
    get hasBillingAddress() {
        return pb_1.Message.getField(this, 26) != null;
    }
    get transactions() {
        return pb_1.Message.getRepeatedWrapperField(this, TransactionOrder, 27) as TransactionOrder[];
    }
    set transactions(value: TransactionOrder[]) {
        pb_1.Message.setRepeatedWrapperField(this, 27, value);
    }
    get fulfillments() {
        return pb_1.Message.getRepeatedWrapperField(this, Fulfillment, 28) as Fulfillment[];
    }
    set fulfillments(value: Fulfillment[]) {
        pb_1.Message.setRepeatedWrapperField(this, 28, value);
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, LineItem, 29) as LineItem[];
    }
    set items(value: LineItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 29, value);
    }
    get discountUsage() {
        return pb_1.Message.getRepeatedWrapperField(this, DiscountUsage, 30) as DiscountUsage[];
    }
    set discountUsage(value: DiscountUsage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 30, value);
    }
    get taxes() {
        return pb_1.Message.getRepeatedWrapperField(this, TaxLine, 31) as TaxLine[];
    }
    set taxes(value: TaxLine[]) {
        pb_1.Message.setRepeatedWrapperField(this, 31, value);
    }
    get channelId() {
        return pb_1.Message.getFieldWithDefault(this, 32, "") as string;
    }
    set channelId(value: string) {
        pb_1.Message.setOneofField(this, 32, this.#one_of_decls[6], value);
    }
    get hasChannelId() {
        return pb_1.Message.getField(this, 32) != null;
    }
    get channel() {
        return pb_1.Message.getWrapperField(this, Channel, 33) as Channel;
    }
    set channel(value: Channel) {
        pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[7], value);
    }
    get hasChannel() {
        return pb_1.Message.getField(this, 33) != null;
    }
    get adjustments() {
        return pb_1.Message.getRepeatedWrapperField(this, InventoryAdjustment, 34) as InventoryAdjustment[];
    }
    set adjustments(value: InventoryAdjustment[]) {
        pb_1.Message.setRepeatedWrapperField(this, 34, value);
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _cancelled() {
        const cases: {
            [index: number]: "none" | "cancelled";
        } = {
            0: "none",
            5: "cancelled"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _customerId() {
        const cases: {
            [index: number]: "none" | "customerId";
        } = {
            0: "none",
            20: "customerId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [20])];
    }
    get _customer() {
        const cases: {
            [index: number]: "none" | "customer";
        } = {
            0: "none",
            24: "customer"
        };
        return cases[pb_1.Message.computeOneofCase(this, [24])];
    }
    get _shippingAddress() {
        const cases: {
            [index: number]: "none" | "shippingAddress";
        } = {
            0: "none",
            25: "shippingAddress"
        };
        return cases[pb_1.Message.computeOneofCase(this, [25])];
    }
    get _billingAddress() {
        const cases: {
            [index: number]: "none" | "billingAddress";
        } = {
            0: "none",
            26: "billingAddress"
        };
        return cases[pb_1.Message.computeOneofCase(this, [26])];
    }
    get _channelId() {
        const cases: {
            [index: number]: "none" | "channelId";
        } = {
            0: "none",
            32: "channelId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [32])];
    }
    get _channel() {
        const cases: {
            [index: number]: "none" | "channel";
        } = {
            0: "none",
            33: "channel"
        };
        return cases[pb_1.Message.computeOneofCase(this, [33])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        cancelled?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        closed?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        status?: OrderOrderStatus;
        fulfillmentStatus?: FulfillmentFulfillmentStatus;
        orderNumber?: string;
        tags?: string[];
        note?: string;
        currency?: string;
        totalPrice?: number;
        subtotal?: number;
        totalTax?: number;
        totalShippingPrice?: number;
        shippingFee?: number;
        cancelReason?: string;
        shopId?: string;
        customerId?: string;
        shippingAddressId?: string;
        billingAddressId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
        customer?: ReturnType<typeof Customer.prototype.toObject>;
        shippingAddress?: ReturnType<typeof CustomerAddress.prototype.toObject>;
        billingAddress?: ReturnType<typeof CustomerAddress.prototype.toObject>;
        transactions?: ReturnType<typeof TransactionOrder.prototype.toObject>[];
        fulfillments?: ReturnType<typeof Fulfillment.prototype.toObject>[];
        items?: ReturnType<typeof LineItem.prototype.toObject>[];
        discountUsage?: ReturnType<typeof DiscountUsage.prototype.toObject>[];
        taxes?: ReturnType<typeof TaxLine.prototype.toObject>[];
        channelId?: string;
        channel?: ReturnType<typeof Channel.prototype.toObject>;
        adjustments?: ReturnType<typeof InventoryAdjustment.prototype.toObject>[];
    }): Order {
        const message = new Order({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.cancelled != null) {
            message.cancelled = dependency_1.Timestamp.fromObject(data.cancelled);
        }
        if (data.closed != null) {
            message.closed = dependency_1.Timestamp.fromObject(data.closed);
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.fulfillmentStatus != null) {
            message.fulfillmentStatus = data.fulfillmentStatus;
        }
        if (data.orderNumber != null) {
            message.orderNumber = data.orderNumber;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        if (data.note != null) {
            message.note = data.note;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.totalPrice != null) {
            message.totalPrice = data.totalPrice;
        }
        if (data.subtotal != null) {
            message.subtotal = data.subtotal;
        }
        if (data.totalTax != null) {
            message.totalTax = data.totalTax;
        }
        if (data.totalShippingPrice != null) {
            message.totalShippingPrice = data.totalShippingPrice;
        }
        if (data.shippingFee != null) {
            message.shippingFee = data.shippingFee;
        }
        if (data.cancelReason != null) {
            message.cancelReason = data.cancelReason;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.customerId != null) {
            message.customerId = data.customerId;
        }
        if (data.shippingAddressId != null) {
            message.shippingAddressId = data.shippingAddressId;
        }
        if (data.billingAddressId != null) {
            message.billingAddressId = data.billingAddressId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        if (data.customer != null) {
            message.customer = Customer.fromObject(data.customer);
        }
        if (data.shippingAddress != null) {
            message.shippingAddress = CustomerAddress.fromObject(data.shippingAddress);
        }
        if (data.billingAddress != null) {
            message.billingAddress = CustomerAddress.fromObject(data.billingAddress);
        }
        if (data.transactions != null) {
            message.transactions = data.transactions.map(item => TransactionOrder.fromObject(item));
        }
        if (data.fulfillments != null) {
            message.fulfillments = data.fulfillments.map(item => Fulfillment.fromObject(item));
        }
        if (data.items != null) {
            message.items = data.items.map(item => LineItem.fromObject(item));
        }
        if (data.discountUsage != null) {
            message.discountUsage = data.discountUsage.map(item => DiscountUsage.fromObject(item));
        }
        if (data.taxes != null) {
            message.taxes = data.taxes.map(item => TaxLine.fromObject(item));
        }
        if (data.channelId != null) {
            message.channelId = data.channelId;
        }
        if (data.channel != null) {
            message.channel = Channel.fromObject(data.channel);
        }
        if (data.adjustments != null) {
            message.adjustments = data.adjustments.map(item => InventoryAdjustment.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            cancelled?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            closed?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            status?: OrderOrderStatus;
            fulfillmentStatus?: FulfillmentFulfillmentStatus;
            orderNumber?: string;
            tags?: string[];
            note?: string;
            currency?: string;
            totalPrice?: number;
            subtotal?: number;
            totalTax?: number;
            totalShippingPrice?: number;
            shippingFee?: number;
            cancelReason?: string;
            shopId?: string;
            customerId?: string;
            shippingAddressId?: string;
            billingAddressId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
            customer?: ReturnType<typeof Customer.prototype.toObject>;
            shippingAddress?: ReturnType<typeof CustomerAddress.prototype.toObject>;
            billingAddress?: ReturnType<typeof CustomerAddress.prototype.toObject>;
            transactions?: ReturnType<typeof TransactionOrder.prototype.toObject>[];
            fulfillments?: ReturnType<typeof Fulfillment.prototype.toObject>[];
            items?: ReturnType<typeof LineItem.prototype.toObject>[];
            discountUsage?: ReturnType<typeof DiscountUsage.prototype.toObject>[];
            taxes?: ReturnType<typeof TaxLine.prototype.toObject>[];
            channelId?: string;
            channel?: ReturnType<typeof Channel.prototype.toObject>;
            adjustments?: ReturnType<typeof InventoryAdjustment.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.cancelled != null) {
            data.cancelled = this.cancelled.toObject();
        }
        if (this.closed != null) {
            data.closed = this.closed.toObject();
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.fulfillmentStatus != null) {
            data.fulfillmentStatus = this.fulfillmentStatus;
        }
        if (this.orderNumber != null) {
            data.orderNumber = this.orderNumber;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        if (this.note != null) {
            data.note = this.note;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.totalPrice != null) {
            data.totalPrice = this.totalPrice;
        }
        if (this.subtotal != null) {
            data.subtotal = this.subtotal;
        }
        if (this.totalTax != null) {
            data.totalTax = this.totalTax;
        }
        if (this.totalShippingPrice != null) {
            data.totalShippingPrice = this.totalShippingPrice;
        }
        if (this.shippingFee != null) {
            data.shippingFee = this.shippingFee;
        }
        if (this.cancelReason != null) {
            data.cancelReason = this.cancelReason;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.customerId != null) {
            data.customerId = this.customerId;
        }
        if (this.shippingAddressId != null) {
            data.shippingAddressId = this.shippingAddressId;
        }
        if (this.billingAddressId != null) {
            data.billingAddressId = this.billingAddressId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.customer != null) {
            data.customer = this.customer.toObject();
        }
        if (this.shippingAddress != null) {
            data.shippingAddress = this.shippingAddress.toObject();
        }
        if (this.billingAddress != null) {
            data.billingAddress = this.billingAddress.toObject();
        }
        if (this.transactions != null) {
            data.transactions = this.transactions.map((item: TransactionOrder) => item.toObject());
        }
        if (this.fulfillments != null) {
            data.fulfillments = this.fulfillments.map((item: Fulfillment) => item.toObject());
        }
        if (this.items != null) {
            data.items = this.items.map((item: LineItem) => item.toObject());
        }
        if (this.discountUsage != null) {
            data.discountUsage = this.discountUsage.map((item: DiscountUsage) => item.toObject());
        }
        if (this.taxes != null) {
            data.taxes = this.taxes.map((item: TaxLine) => item.toObject());
        }
        if (this.channelId != null) {
            data.channelId = this.channelId;
        }
        if (this.channel != null) {
            data.channel = this.channel.toObject();
        }
        if (this.adjustments != null) {
            data.adjustments = this.adjustments.map((item: InventoryAdjustment) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.hasCancelled)
            writer.writeMessage(5, this.cancelled, () => this.cancelled.serialize(writer));
        if (this.hasClosed)
            writer.writeMessage(6, this.closed, () => this.closed.serialize(writer));
        if (this.status != OrderOrderStatus.PENDING)
            writer.writeEnum(7, this.status);
        if (this.fulfillmentStatus != FulfillmentFulfillmentStatus.PENDING)
            writer.writeEnum(8, this.fulfillmentStatus);
        if (this.orderNumber.length)
            writer.writeString(9, this.orderNumber);
        if (this.tags.length)
            writer.writeRepeatedString(10, this.tags);
        if (this.note.length)
            writer.writeString(11, this.note);
        if (this.currency.length)
            writer.writeString(12, this.currency);
        if (this.totalPrice != 0)
            writer.writeDouble(13, this.totalPrice);
        if (this.subtotal != 0)
            writer.writeDouble(14, this.subtotal);
        if (this.totalTax != 0)
            writer.writeDouble(15, this.totalTax);
        if (this.totalShippingPrice != 0)
            writer.writeDouble(16, this.totalShippingPrice);
        if (this.shippingFee != 0)
            writer.writeDouble(17, this.shippingFee);
        if (this.cancelReason.length)
            writer.writeString(18, this.cancelReason);
        if (this.shopId.length)
            writer.writeString(19, this.shopId);
        if (this.hasCustomerId)
            writer.writeString(20, this.customerId);
        if (this.shippingAddressId.length)
            writer.writeString(21, this.shippingAddressId);
        if (this.billingAddressId.length)
            writer.writeString(22, this.billingAddressId);
        if (this.hasShop)
            writer.writeMessage(23, this.shop, () => this.shop.serialize(writer));
        if (this.hasCustomer)
            writer.writeMessage(24, this.customer, () => this.customer.serialize(writer));
        if (this.hasShippingAddress)
            writer.writeMessage(25, this.shippingAddress, () => this.shippingAddress.serialize(writer));
        if (this.hasBillingAddress)
            writer.writeMessage(26, this.billingAddress, () => this.billingAddress.serialize(writer));
        if (this.transactions.length)
            writer.writeRepeatedMessage(27, this.transactions, (item: TransactionOrder) => item.serialize(writer));
        if (this.fulfillments.length)
            writer.writeRepeatedMessage(28, this.fulfillments, (item: Fulfillment) => item.serialize(writer));
        if (this.items.length)
            writer.writeRepeatedMessage(29, this.items, (item: LineItem) => item.serialize(writer));
        if (this.discountUsage.length)
            writer.writeRepeatedMessage(30, this.discountUsage, (item: DiscountUsage) => item.serialize(writer));
        if (this.taxes.length)
            writer.writeRepeatedMessage(31, this.taxes, (item: TaxLine) => item.serialize(writer));
        if (this.hasChannelId)
            writer.writeString(32, this.channelId);
        if (this.hasChannel)
            writer.writeMessage(33, this.channel, () => this.channel.serialize(writer));
        if (this.adjustments.length)
            writer.writeRepeatedMessage(34, this.adjustments, (item: InventoryAdjustment) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Order {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Order();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.cancelled, () => message.cancelled = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.closed, () => message.closed = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 7:
                    message.status = reader.readEnum();
                    break;
                case 8:
                    message.fulfillmentStatus = reader.readEnum();
                    break;
                case 9:
                    message.orderNumber = reader.readString();
                    break;
                case 10:
                    pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                    break;
                case 11:
                    message.note = reader.readString();
                    break;
                case 12:
                    message.currency = reader.readString();
                    break;
                case 13:
                    message.totalPrice = reader.readDouble();
                    break;
                case 14:
                    message.subtotal = reader.readDouble();
                    break;
                case 15:
                    message.totalTax = reader.readDouble();
                    break;
                case 16:
                    message.totalShippingPrice = reader.readDouble();
                    break;
                case 17:
                    message.shippingFee = reader.readDouble();
                    break;
                case 18:
                    message.cancelReason = reader.readString();
                    break;
                case 19:
                    message.shopId = reader.readString();
                    break;
                case 20:
                    message.customerId = reader.readString();
                    break;
                case 21:
                    message.shippingAddressId = reader.readString();
                    break;
                case 22:
                    message.billingAddressId = reader.readString();
                    break;
                case 23:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                case 24:
                    reader.readMessage(message.customer, () => message.customer = Customer.deserialize(reader));
                    break;
                case 25:
                    reader.readMessage(message.shippingAddress, () => message.shippingAddress = CustomerAddress.deserialize(reader));
                    break;
                case 26:
                    reader.readMessage(message.billingAddress, () => message.billingAddress = CustomerAddress.deserialize(reader));
                    break;
                case 27:
                    reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 27, TransactionOrder.deserialize(reader), TransactionOrder));
                    break;
                case 28:
                    reader.readMessage(message.fulfillments, () => pb_1.Message.addToRepeatedWrapperField(message, 28, Fulfillment.deserialize(reader), Fulfillment));
                    break;
                case 29:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 29, LineItem.deserialize(reader), LineItem));
                    break;
                case 30:
                    reader.readMessage(message.discountUsage, () => pb_1.Message.addToRepeatedWrapperField(message, 30, DiscountUsage.deserialize(reader), DiscountUsage));
                    break;
                case 31:
                    reader.readMessage(message.taxes, () => pb_1.Message.addToRepeatedWrapperField(message, 31, TaxLine.deserialize(reader), TaxLine));
                    break;
                case 32:
                    message.channelId = reader.readString();
                    break;
                case 33:
                    reader.readMessage(message.channel, () => message.channel = Channel.deserialize(reader));
                    break;
                case 34:
                    reader.readMessage(message.adjustments, () => pb_1.Message.addToRepeatedWrapperField(message, 34, InventoryAdjustment.deserialize(reader), InventoryAdjustment));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Order {
        return Order.deserialize(bytes);
    }
}
export enum OrderOrderStatus {
    PENDING = 0,
    CONFIRM = 1,
    HOLD = 2,
    PAYMENT_FAIL = 3,
    AWAITING_SHIPMENT = 4,
    PARTIAL = 5,
    IN_TRANSIT = 6,
    DELIVERED = 7,
    DONE = 8,
    CANCEL = 9,
    RETURN = 10,
    REFUND = 11,
    FAILED = 12,
    DISPUTE = 13,
    LOST_IN_TRANSIT = 14
}
export class LineItem extends pb_1.Message {
    #one_of_decls: number[][] = [[11], [12], [14], [15]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        sku?: string;
        vendor?: string;
        price?: number;
        quantity?: number;
        taxable?: boolean;
        reqShipping?: boolean;
        orderId?: string;
        order?: Order;
        fulfillments?: FulfillmentLineItem[];
        taxes?: TaxLine[];
    } & (({
        productId?: string;
    }) | ({
        variantId?: string;
    }) | ({
        product?: Product;
    }) | ({
        variant?: ProductVariant;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [16, 17], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("sku" in data && data.sku != undefined) {
                this.sku = data.sku;
            }
            if ("vendor" in data && data.vendor != undefined) {
                this.vendor = data.vendor;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("taxable" in data && data.taxable != undefined) {
                this.taxable = data.taxable;
            }
            if ("reqShipping" in data && data.reqShipping != undefined) {
                this.reqShipping = data.reqShipping;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("variantId" in data && data.variantId != undefined) {
                this.variantId = data.variantId;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
            if ("variant" in data && data.variant != undefined) {
                this.variant = data.variant;
            }
            if ("fulfillments" in data && data.fulfillments != undefined) {
                this.fulfillments = data.fulfillments;
            }
            if ("taxes" in data && data.taxes != undefined) {
                this.taxes = data.taxes;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get sku() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sku(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get vendor() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set vendor(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get taxable() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set taxable(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get reqShipping() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set reqShipping(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setOneofField(this, 11, this.#one_of_decls[0], value);
    }
    get hasProductId() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get variantId() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set variantId(value: string) {
        pb_1.Message.setOneofField(this, 12, this.#one_of_decls[1], value);
    }
    get hasVariantId() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 13) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get product() {
        return pb_1.Message.getWrapperField(this, Product, 14) as Product;
    }
    set product(value: Product) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[2], value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get variant() {
        return pb_1.Message.getWrapperField(this, ProductVariant, 15) as ProductVariant;
    }
    set variant(value: ProductVariant) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[3], value);
    }
    get hasVariant() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get fulfillments() {
        return pb_1.Message.getRepeatedWrapperField(this, FulfillmentLineItem, 16) as FulfillmentLineItem[];
    }
    set fulfillments(value: FulfillmentLineItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 16, value);
    }
    get taxes() {
        return pb_1.Message.getRepeatedWrapperField(this, TaxLine, 17) as TaxLine[];
    }
    set taxes(value: TaxLine[]) {
        pb_1.Message.setRepeatedWrapperField(this, 17, value);
    }
    get _productId() {
        const cases: {
            [index: number]: "none" | "productId";
        } = {
            0: "none",
            11: "productId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [11])];
    }
    get _variantId() {
        const cases: {
            [index: number]: "none" | "variantId";
        } = {
            0: "none",
            12: "variantId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [12])];
    }
    get _product() {
        const cases: {
            [index: number]: "none" | "product";
        } = {
            0: "none",
            14: "product"
        };
        return cases[pb_1.Message.computeOneofCase(this, [14])];
    }
    get _variant() {
        const cases: {
            [index: number]: "none" | "variant";
        } = {
            0: "none",
            15: "variant"
        };
        return cases[pb_1.Message.computeOneofCase(this, [15])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        sku?: string;
        vendor?: string;
        price?: number;
        quantity?: number;
        taxable?: boolean;
        reqShipping?: boolean;
        orderId?: string;
        productId?: string;
        variantId?: string;
        order?: ReturnType<typeof Order.prototype.toObject>;
        product?: ReturnType<typeof Product.prototype.toObject>;
        variant?: ReturnType<typeof ProductVariant.prototype.toObject>;
        fulfillments?: ReturnType<typeof FulfillmentLineItem.prototype.toObject>[];
        taxes?: ReturnType<typeof TaxLine.prototype.toObject>[];
    }): LineItem {
        const message = new LineItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.sku != null) {
            message.sku = data.sku;
        }
        if (data.vendor != null) {
            message.vendor = data.vendor;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.taxable != null) {
            message.taxable = data.taxable;
        }
        if (data.reqShipping != null) {
            message.reqShipping = data.reqShipping;
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.variantId != null) {
            message.variantId = data.variantId;
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        if (data.product != null) {
            message.product = Product.fromObject(data.product);
        }
        if (data.variant != null) {
            message.variant = ProductVariant.fromObject(data.variant);
        }
        if (data.fulfillments != null) {
            message.fulfillments = data.fulfillments.map(item => FulfillmentLineItem.fromObject(item));
        }
        if (data.taxes != null) {
            message.taxes = data.taxes.map(item => TaxLine.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            sku?: string;
            vendor?: string;
            price?: number;
            quantity?: number;
            taxable?: boolean;
            reqShipping?: boolean;
            orderId?: string;
            productId?: string;
            variantId?: string;
            order?: ReturnType<typeof Order.prototype.toObject>;
            product?: ReturnType<typeof Product.prototype.toObject>;
            variant?: ReturnType<typeof ProductVariant.prototype.toObject>;
            fulfillments?: ReturnType<typeof FulfillmentLineItem.prototype.toObject>[];
            taxes?: ReturnType<typeof TaxLine.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.sku != null) {
            data.sku = this.sku;
        }
        if (this.vendor != null) {
            data.vendor = this.vendor;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.taxable != null) {
            data.taxable = this.taxable;
        }
        if (this.reqShipping != null) {
            data.reqShipping = this.reqShipping;
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.productId != null) {
            data.productId = this.productId;
        }
        if (this.variantId != null) {
            data.variantId = this.variantId;
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        if (this.variant != null) {
            data.variant = this.variant.toObject();
        }
        if (this.fulfillments != null) {
            data.fulfillments = this.fulfillments.map((item: FulfillmentLineItem) => item.toObject());
        }
        if (this.taxes != null) {
            data.taxes = this.taxes.map((item: TaxLine) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.sku.length)
            writer.writeString(4, this.sku);
        if (this.vendor.length)
            writer.writeString(5, this.vendor);
        if (this.price != 0)
            writer.writeDouble(6, this.price);
        if (this.quantity != 0)
            writer.writeDouble(7, this.quantity);
        if (this.taxable != false)
            writer.writeBool(8, this.taxable);
        if (this.reqShipping != false)
            writer.writeBool(9, this.reqShipping);
        if (this.orderId.length)
            writer.writeString(10, this.orderId);
        if (this.hasProductId)
            writer.writeString(11, this.productId);
        if (this.hasVariantId)
            writer.writeString(12, this.variantId);
        if (this.hasOrder)
            writer.writeMessage(13, this.order, () => this.order.serialize(writer));
        if (this.hasProduct)
            writer.writeMessage(14, this.product, () => this.product.serialize(writer));
        if (this.hasVariant)
            writer.writeMessage(15, this.variant, () => this.variant.serialize(writer));
        if (this.fulfillments.length)
            writer.writeRepeatedMessage(16, this.fulfillments, (item: FulfillmentLineItem) => item.serialize(writer));
        if (this.taxes.length)
            writer.writeRepeatedMessage(17, this.taxes, (item: TaxLine) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.sku = reader.readString();
                    break;
                case 5:
                    message.vendor = reader.readString();
                    break;
                case 6:
                    message.price = reader.readDouble();
                    break;
                case 7:
                    message.quantity = reader.readDouble();
                    break;
                case 8:
                    message.taxable = reader.readBool();
                    break;
                case 9:
                    message.reqShipping = reader.readBool();
                    break;
                case 10:
                    message.orderId = reader.readString();
                    break;
                case 11:
                    message.productId = reader.readString();
                    break;
                case 12:
                    message.variantId = reader.readString();
                    break;
                case 13:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.product, () => message.product = Product.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.variant, () => message.variant = ProductVariant.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.fulfillments, () => pb_1.Message.addToRepeatedWrapperField(message, 16, FulfillmentLineItem.deserialize(reader), FulfillmentLineItem));
                    break;
                case 17:
                    reader.readMessage(message.taxes, () => pb_1.Message.addToRepeatedWrapperField(message, 17, TaxLine.deserialize(reader), TaxLine));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LineItem {
        return LineItem.deserialize(bytes);
    }
}
export class Fulfillment extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        status?: FulfillmentFulfillmentStatus;
        trackCompany?: string;
        trackNumber?: string;
        trackUrl?: string;
        orderId?: string;
        items?: FulfillmentLineItem[];
        order?: Order;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("trackCompany" in data && data.trackCompany != undefined) {
                this.trackCompany = data.trackCompany;
            }
            if ("trackNumber" in data && data.trackNumber != undefined) {
                this.trackNumber = data.trackNumber;
            }
            if ("trackUrl" in data && data.trackUrl != undefined) {
                this.trackUrl = data.trackUrl;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 4, FulfillmentFulfillmentStatus.PENDING) as FulfillmentFulfillmentStatus;
    }
    set status(value: FulfillmentFulfillmentStatus) {
        pb_1.Message.setField(this, 4, value);
    }
    get trackCompany() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set trackCompany(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get trackNumber() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set trackNumber(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get trackUrl() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set trackUrl(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, FulfillmentLineItem, 9) as FulfillmentLineItem[];
    }
    set items(value: FulfillmentLineItem[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 10) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 10) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        status?: FulfillmentFulfillmentStatus;
        trackCompany?: string;
        trackNumber?: string;
        trackUrl?: string;
        orderId?: string;
        items?: ReturnType<typeof FulfillmentLineItem.prototype.toObject>[];
        order?: ReturnType<typeof Order.prototype.toObject>;
    }): Fulfillment {
        const message = new Fulfillment({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.trackCompany != null) {
            message.trackCompany = data.trackCompany;
        }
        if (data.trackNumber != null) {
            message.trackNumber = data.trackNumber;
        }
        if (data.trackUrl != null) {
            message.trackUrl = data.trackUrl;
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.items != null) {
            message.items = data.items.map(item => FulfillmentLineItem.fromObject(item));
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            status?: FulfillmentFulfillmentStatus;
            trackCompany?: string;
            trackNumber?: string;
            trackUrl?: string;
            orderId?: string;
            items?: ReturnType<typeof FulfillmentLineItem.prototype.toObject>[];
            order?: ReturnType<typeof Order.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.trackCompany != null) {
            data.trackCompany = this.trackCompany;
        }
        if (this.trackNumber != null) {
            data.trackNumber = this.trackNumber;
        }
        if (this.trackUrl != null) {
            data.trackUrl = this.trackUrl;
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.items != null) {
            data.items = this.items.map((item: FulfillmentLineItem) => item.toObject());
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.status != FulfillmentFulfillmentStatus.PENDING)
            writer.writeEnum(4, this.status);
        if (this.trackCompany.length)
            writer.writeString(5, this.trackCompany);
        if (this.trackNumber.length)
            writer.writeString(6, this.trackNumber);
        if (this.trackUrl.length)
            writer.writeString(7, this.trackUrl);
        if (this.orderId.length)
            writer.writeString(8, this.orderId);
        if (this.items.length)
            writer.writeRepeatedMessage(9, this.items, (item: FulfillmentLineItem) => item.serialize(writer));
        if (this.hasOrder)
            writer.writeMessage(10, this.order, () => this.order.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fulfillment {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fulfillment();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.status = reader.readEnum();
                    break;
                case 5:
                    message.trackCompany = reader.readString();
                    break;
                case 6:
                    message.trackNumber = reader.readString();
                    break;
                case 7:
                    message.trackUrl = reader.readString();
                    break;
                case 8:
                    message.orderId = reader.readString();
                    break;
                case 9:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 9, FulfillmentLineItem.deserialize(reader), FulfillmentLineItem));
                    break;
                case 10:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Fulfillment {
        return Fulfillment.deserialize(bytes);
    }
}
export enum FulfillmentFulfillmentStatus {
    PENDING = 0,
    PROCESS = 1,
    SHIPPED = 2,
    DELIVERED = 3,
    CANCEL = 4,
    RETURN = 5,
    OUT_FOR_DELIVERY = 6,
    IN_TRANSIT = 7,
    PARTIAL = 8
}
export class FulfillmentLineItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        quantity?: number;
        fulfillmentId?: string;
        itemId?: string;
        item?: LineItem;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("fulfillmentId" in data && data.fulfillmentId != undefined) {
                this.fulfillmentId = data.fulfillmentId;
            }
            if ("itemId" in data && data.itemId != undefined) {
                this.itemId = data.itemId;
            }
            if ("item" in data && data.item != undefined) {
                this.item = data.item;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get fulfillmentId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set fulfillmentId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get itemId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set itemId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get item() {
        return pb_1.Message.getWrapperField(this, LineItem, 5) as LineItem;
    }
    set item(value: LineItem) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasItem() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        id?: string;
        quantity?: number;
        fulfillmentId?: string;
        itemId?: string;
        item?: ReturnType<typeof LineItem.prototype.toObject>;
    }): FulfillmentLineItem {
        const message = new FulfillmentLineItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.fulfillmentId != null) {
            message.fulfillmentId = data.fulfillmentId;
        }
        if (data.itemId != null) {
            message.itemId = data.itemId;
        }
        if (data.item != null) {
            message.item = LineItem.fromObject(data.item);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            quantity?: number;
            fulfillmentId?: string;
            itemId?: string;
            item?: ReturnType<typeof LineItem.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.fulfillmentId != null) {
            data.fulfillmentId = this.fulfillmentId;
        }
        if (this.itemId != null) {
            data.itemId = this.itemId;
        }
        if (this.item != null) {
            data.item = this.item.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.quantity != 0)
            writer.writeDouble(2, this.quantity);
        if (this.fulfillmentId.length)
            writer.writeString(3, this.fulfillmentId);
        if (this.itemId.length)
            writer.writeString(4, this.itemId);
        if (this.hasItem)
            writer.writeMessage(5, this.item, () => this.item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FulfillmentLineItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FulfillmentLineItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.quantity = reader.readDouble();
                    break;
                case 3:
                    message.fulfillmentId = reader.readString();
                    break;
                case 4:
                    message.itemId = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.item, () => message.item = LineItem.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FulfillmentLineItem {
        return FulfillmentLineItem.deserialize(bytes);
    }
}
export class Transaction extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        processed?: dependency_1.Timestamp;
        kind?: TransactionTransactionKind;
        status?: TransactionTransactionStatus;
        amount?: number;
        currency?: string;
        orders?: Order[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("processed" in data && data.processed != undefined) {
                this.processed = data.processed;
            }
            if ("kind" in data && data.kind != undefined) {
                this.kind = data.kind;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("orders" in data && data.orders != undefined) {
                this.orders = data.orders;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get processed() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set processed(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasProcessed() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get kind() {
        return pb_1.Message.getFieldWithDefault(this, 4, TransactionTransactionKind.VOID) as TransactionTransactionKind;
    }
    set kind(value: TransactionTransactionKind) {
        pb_1.Message.setField(this, 4, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 5, TransactionTransactionStatus.OK) as TransactionTransactionStatus;
    }
    set status(value: TransactionTransactionStatus) {
        pb_1.Message.setField(this, 5, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get orders() {
        return pb_1.Message.getRepeatedWrapperField(this, Order, 8) as Order[];
    }
    set orders(value: Order[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        processed?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        kind?: TransactionTransactionKind;
        status?: TransactionTransactionStatus;
        amount?: number;
        currency?: string;
        orders?: ReturnType<typeof Order.prototype.toObject>[];
    }): Transaction {
        const message = new Transaction({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.processed != null) {
            message.processed = dependency_1.Timestamp.fromObject(data.processed);
        }
        if (data.kind != null) {
            message.kind = data.kind;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.orders != null) {
            message.orders = data.orders.map(item => Order.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            processed?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            kind?: TransactionTransactionKind;
            status?: TransactionTransactionStatus;
            amount?: number;
            currency?: string;
            orders?: ReturnType<typeof Order.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.processed != null) {
            data.processed = this.processed.toObject();
        }
        if (this.kind != null) {
            data.kind = this.kind;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.orders != null) {
            data.orders = this.orders.map((item: Order) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasProcessed)
            writer.writeMessage(3, this.processed, () => this.processed.serialize(writer));
        if (this.kind != TransactionTransactionKind.VOID)
            writer.writeEnum(4, this.kind);
        if (this.status != TransactionTransactionStatus.OK)
            writer.writeEnum(5, this.status);
        if (this.amount != 0)
            writer.writeDouble(6, this.amount);
        if (this.currency.length)
            writer.writeString(7, this.currency);
        if (this.orders.length)
            writer.writeRepeatedMessage(8, this.orders, (item: Order) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.processed, () => message.processed = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.kind = reader.readEnum();
                    break;
                case 5:
                    message.status = reader.readEnum();
                    break;
                case 6:
                    message.amount = reader.readDouble();
                    break;
                case 7:
                    message.currency = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.orders, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Order.deserialize(reader), Order));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Transaction {
        return Transaction.deserialize(bytes);
    }
}
export enum TransactionTransactionKind {
    VOID = 0,
    CHARGE = 1,
    CAPTURE = 2,
    AUTHORIZATION = 3,
    K_REFUND = 4,
    PAYOUT = 5,
    DISPUTE = 6,
    CREDIT = 7,
    ADJUST = 8
}
export enum TransactionTransactionStatus {
    OK = 0,
    FAIL = 1,
    PENDING = 2,
    CANCEL = 3,
    S_REFUND = 4,
    PROCESS = 5
}
export class TransactionOrder extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        transactionId?: string;
        orderId?: string;
        transaction?: Transaction;
        order?: Order;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("transactionId" in data && data.transactionId != undefined) {
                this.transactionId = data.transactionId;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("transaction" in data && data.transaction != undefined) {
                this.transaction = data.transaction;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get transactionId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set transactionId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get transaction() {
        return pb_1.Message.getWrapperField(this, Transaction, 5) as Transaction;
    }
    set transaction(value: Transaction) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasTransaction() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 6) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        transactionId?: string;
        orderId?: string;
        transaction?: ReturnType<typeof Transaction.prototype.toObject>;
        order?: ReturnType<typeof Order.prototype.toObject>;
    }): TransactionOrder {
        const message = new TransactionOrder({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.transactionId != null) {
            message.transactionId = data.transactionId;
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.transaction != null) {
            message.transaction = Transaction.fromObject(data.transaction);
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            transactionId?: string;
            orderId?: string;
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            order?: ReturnType<typeof Order.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.transactionId != null) {
            data.transactionId = this.transactionId;
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.transaction != null) {
            data.transaction = this.transaction.toObject();
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.transactionId.length)
            writer.writeString(3, this.transactionId);
        if (this.orderId.length)
            writer.writeString(4, this.orderId);
        if (this.hasTransaction)
            writer.writeMessage(5, this.transaction, () => this.transaction.serialize(writer));
        if (this.hasOrder)
            writer.writeMessage(6, this.order, () => this.order.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionOrder {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionOrder();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.transactionId = reader.readString();
                    break;
                case 4:
                    message.orderId = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransactionOrder {
        return TransactionOrder.deserialize(bytes);
    }
}
export class PaymentGateway extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        isActive?: boolean;
        isTestMode?: boolean;
        credentials?: dependency_2.Any;
        transactions?: Transaction[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("isActive" in data && data.isActive != undefined) {
                this.isActive = data.isActive;
            }
            if ("isTestMode" in data && data.isTestMode != undefined) {
                this.isTestMode = data.isTestMode;
            }
            if ("credentials" in data && data.credentials != undefined) {
                this.credentials = data.credentials;
            }
            if ("transactions" in data && data.transactions != undefined) {
                this.transactions = data.transactions;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get isActive() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set isActive(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get isTestMode() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isTestMode(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get credentials() {
        return pb_1.Message.getWrapperField(this, dependency_2.Any, 7) as dependency_2.Any;
    }
    set credentials(value: dependency_2.Any) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasCredentials() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get transactions() {
        return pb_1.Message.getRepeatedWrapperField(this, Transaction, 8) as Transaction[];
    }
    set transactions(value: Transaction[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        isActive?: boolean;
        isTestMode?: boolean;
        credentials?: ReturnType<typeof dependency_2.Any.prototype.toObject>;
        transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
    }): PaymentGateway {
        const message = new PaymentGateway({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.isActive != null) {
            message.isActive = data.isActive;
        }
        if (data.isTestMode != null) {
            message.isTestMode = data.isTestMode;
        }
        if (data.credentials != null) {
            message.credentials = dependency_2.Any.fromObject(data.credentials);
        }
        if (data.transactions != null) {
            message.transactions = data.transactions.map(item => Transaction.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            isActive?: boolean;
            isTestMode?: boolean;
            credentials?: ReturnType<typeof dependency_2.Any.prototype.toObject>;
            transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.isActive != null) {
            data.isActive = this.isActive;
        }
        if (this.isTestMode != null) {
            data.isTestMode = this.isTestMode;
        }
        if (this.credentials != null) {
            data.credentials = this.credentials.toObject();
        }
        if (this.transactions != null) {
            data.transactions = this.transactions.map((item: Transaction) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.isActive != false)
            writer.writeBool(5, this.isActive);
        if (this.isTestMode != false)
            writer.writeBool(6, this.isTestMode);
        if (this.hasCredentials)
            writer.writeMessage(7, this.credentials, () => this.credentials.serialize(writer));
        if (this.transactions.length)
            writer.writeRepeatedMessage(8, this.transactions, (item: Transaction) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaymentGateway {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaymentGateway();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.isActive = reader.readBool();
                    break;
                case 6:
                    message.isTestMode = reader.readBool();
                    break;
                case 7:
                    reader.readMessage(message.credentials, () => message.credentials = dependency_2.Any.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Transaction.deserialize(reader), Transaction));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PaymentGateway {
        return PaymentGateway.deserialize(bytes);
    }
}
export class InventoryItem extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        sku?: string;
        barcode?: string;
        tracked?: boolean;
        reqShipping?: boolean;
        levels?: InventoryLevel[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("sku" in data && data.sku != undefined) {
                this.sku = data.sku;
            }
            if ("barcode" in data && data.barcode != undefined) {
                this.barcode = data.barcode;
            }
            if ("tracked" in data && data.tracked != undefined) {
                this.tracked = data.tracked;
            }
            if ("reqShipping" in data && data.reqShipping != undefined) {
                this.reqShipping = data.reqShipping;
            }
            if ("levels" in data && data.levels != undefined) {
                this.levels = data.levels;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get sku() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sku(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get barcode() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set barcode(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get tracked() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set tracked(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get reqShipping() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set reqShipping(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get levels() {
        return pb_1.Message.getRepeatedWrapperField(this, InventoryLevel, 8) as InventoryLevel[];
    }
    set levels(value: InventoryLevel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        sku?: string;
        barcode?: string;
        tracked?: boolean;
        reqShipping?: boolean;
        levels?: ReturnType<typeof InventoryLevel.prototype.toObject>[];
    }): InventoryItem {
        const message = new InventoryItem({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.sku != null) {
            message.sku = data.sku;
        }
        if (data.barcode != null) {
            message.barcode = data.barcode;
        }
        if (data.tracked != null) {
            message.tracked = data.tracked;
        }
        if (data.reqShipping != null) {
            message.reqShipping = data.reqShipping;
        }
        if (data.levels != null) {
            message.levels = data.levels.map(item => InventoryLevel.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            sku?: string;
            barcode?: string;
            tracked?: boolean;
            reqShipping?: boolean;
            levels?: ReturnType<typeof InventoryLevel.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.sku != null) {
            data.sku = this.sku;
        }
        if (this.barcode != null) {
            data.barcode = this.barcode;
        }
        if (this.tracked != null) {
            data.tracked = this.tracked;
        }
        if (this.reqShipping != null) {
            data.reqShipping = this.reqShipping;
        }
        if (this.levels != null) {
            data.levels = this.levels.map((item: InventoryLevel) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.sku.length)
            writer.writeString(4, this.sku);
        if (this.barcode.length)
            writer.writeString(5, this.barcode);
        if (this.tracked != false)
            writer.writeBool(6, this.tracked);
        if (this.reqShipping != false)
            writer.writeBool(7, this.reqShipping);
        if (this.levels.length)
            writer.writeRepeatedMessage(8, this.levels, (item: InventoryLevel) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InventoryItem {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InventoryItem();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.sku = reader.readString();
                    break;
                case 5:
                    message.barcode = reader.readString();
                    break;
                case 6:
                    message.tracked = reader.readBool();
                    break;
                case 7:
                    message.reqShipping = reader.readBool();
                    break;
                case 8:
                    reader.readMessage(message.levels, () => pb_1.Message.addToRepeatedWrapperField(message, 8, InventoryLevel.deserialize(reader), InventoryLevel));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InventoryItem {
        return InventoryItem.deserialize(bytes);
    }
}
export class InventoryLevel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        itemId?: string;
        locationId?: string;
        item?: InventoryItem;
        location?: Location;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("itemId" in data && data.itemId != undefined) {
                this.itemId = data.itemId;
            }
            if ("locationId" in data && data.locationId != undefined) {
                this.locationId = data.locationId;
            }
            if ("item" in data && data.item != undefined) {
                this.item = data.item;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get itemId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set itemId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get locationId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set locationId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get item() {
        return pb_1.Message.getWrapperField(this, InventoryItem, 6) as InventoryItem;
    }
    set item(value: InventoryItem) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasItem() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get location() {
        return pb_1.Message.getWrapperField(this, Location, 7) as Location;
    }
    set location(value: Location) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasLocation() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        itemId?: string;
        locationId?: string;
        item?: ReturnType<typeof InventoryItem.prototype.toObject>;
        location?: ReturnType<typeof Location.prototype.toObject>;
    }): InventoryLevel {
        const message = new InventoryLevel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.itemId != null) {
            message.itemId = data.itemId;
        }
        if (data.locationId != null) {
            message.locationId = data.locationId;
        }
        if (data.item != null) {
            message.item = InventoryItem.fromObject(data.item);
        }
        if (data.location != null) {
            message.location = Location.fromObject(data.location);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            itemId?: string;
            locationId?: string;
            item?: ReturnType<typeof InventoryItem.prototype.toObject>;
            location?: ReturnType<typeof Location.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.itemId != null) {
            data.itemId = this.itemId;
        }
        if (this.locationId != null) {
            data.locationId = this.locationId;
        }
        if (this.item != null) {
            data.item = this.item.toObject();
        }
        if (this.location != null) {
            data.location = this.location.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.itemId.length)
            writer.writeString(4, this.itemId);
        if (this.locationId.length)
            writer.writeString(5, this.locationId);
        if (this.hasItem)
            writer.writeMessage(6, this.item, () => this.item.serialize(writer));
        if (this.hasLocation)
            writer.writeMessage(7, this.location, () => this.location.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InventoryLevel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InventoryLevel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.itemId = reader.readString();
                    break;
                case 5:
                    message.locationId = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.item, () => message.item = InventoryItem.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.location, () => message.location = Location.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InventoryLevel {
        return InventoryLevel.deserialize(bytes);
    }
}
export class InventoryAdjustment extends pb_1.Message {
    #one_of_decls: number[][] = [[7], [8], [13], [14]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        reason?: string;
        delta?: number;
        quantityBefore?: number;
        quantityAfter?: number;
        itemId?: string;
        item?: InventoryItem;
        locationId?: string;
        location?: Location;
    } & (({
        cost?: number;
    }) | ({
        note?: string;
    }) | ({
        orderId?: string;
    }) | ({
        order?: Order;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("delta" in data && data.delta != undefined) {
                this.delta = data.delta;
            }
            if ("quantityBefore" in data && data.quantityBefore != undefined) {
                this.quantityBefore = data.quantityBefore;
            }
            if ("quantityAfter" in data && data.quantityAfter != undefined) {
                this.quantityAfter = data.quantityAfter;
            }
            if ("cost" in data && data.cost != undefined) {
                this.cost = data.cost;
            }
            if ("note" in data && data.note != undefined) {
                this.note = data.note;
            }
            if ("itemId" in data && data.itemId != undefined) {
                this.itemId = data.itemId;
            }
            if ("item" in data && data.item != undefined) {
                this.item = data.item;
            }
            if ("locationId" in data && data.locationId != undefined) {
                this.locationId = data.locationId;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get delta() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set delta(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get quantityBefore() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set quantityBefore(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get quantityAfter() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set quantityAfter(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get cost() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set cost(value: number) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
    }
    get hasCost() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get note() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set note(value: string) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[1], value);
    }
    get hasNote() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get itemId() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set itemId(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get item() {
        return pb_1.Message.getWrapperField(this, InventoryItem, 10) as InventoryItem;
    }
    set item(value: InventoryItem) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get hasItem() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get locationId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set locationId(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get location() {
        return pb_1.Message.getWrapperField(this, Location, 12) as Location;
    }
    set location(value: Location) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get hasLocation() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setOneofField(this, 13, this.#one_of_decls[2], value);
    }
    get hasOrderId() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 14) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[3], value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get _cost() {
        const cases: {
            [index: number]: "none" | "cost";
        } = {
            0: "none",
            7: "cost"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _note() {
        const cases: {
            [index: number]: "none" | "note";
        } = {
            0: "none",
            8: "note"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    get _orderId() {
        const cases: {
            [index: number]: "none" | "orderId";
        } = {
            0: "none",
            13: "orderId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [13])];
    }
    get _order() {
        const cases: {
            [index: number]: "none" | "order";
        } = {
            0: "none",
            14: "order"
        };
        return cases[pb_1.Message.computeOneofCase(this, [14])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        reason?: string;
        delta?: number;
        quantityBefore?: number;
        quantityAfter?: number;
        cost?: number;
        note?: string;
        itemId?: string;
        item?: ReturnType<typeof InventoryItem.prototype.toObject>;
        locationId?: string;
        location?: ReturnType<typeof Location.prototype.toObject>;
        orderId?: string;
        order?: ReturnType<typeof Order.prototype.toObject>;
    }): InventoryAdjustment {
        const message = new InventoryAdjustment({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.delta != null) {
            message.delta = data.delta;
        }
        if (data.quantityBefore != null) {
            message.quantityBefore = data.quantityBefore;
        }
        if (data.quantityAfter != null) {
            message.quantityAfter = data.quantityAfter;
        }
        if (data.cost != null) {
            message.cost = data.cost;
        }
        if (data.note != null) {
            message.note = data.note;
        }
        if (data.itemId != null) {
            message.itemId = data.itemId;
        }
        if (data.item != null) {
            message.item = InventoryItem.fromObject(data.item);
        }
        if (data.locationId != null) {
            message.locationId = data.locationId;
        }
        if (data.location != null) {
            message.location = Location.fromObject(data.location);
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            reason?: string;
            delta?: number;
            quantityBefore?: number;
            quantityAfter?: number;
            cost?: number;
            note?: string;
            itemId?: string;
            item?: ReturnType<typeof InventoryItem.prototype.toObject>;
            locationId?: string;
            location?: ReturnType<typeof Location.prototype.toObject>;
            orderId?: string;
            order?: ReturnType<typeof Order.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.delta != null) {
            data.delta = this.delta;
        }
        if (this.quantityBefore != null) {
            data.quantityBefore = this.quantityBefore;
        }
        if (this.quantityAfter != null) {
            data.quantityAfter = this.quantityAfter;
        }
        if (this.cost != null) {
            data.cost = this.cost;
        }
        if (this.note != null) {
            data.note = this.note;
        }
        if (this.itemId != null) {
            data.itemId = this.itemId;
        }
        if (this.item != null) {
            data.item = this.item.toObject();
        }
        if (this.locationId != null) {
            data.locationId = this.locationId;
        }
        if (this.location != null) {
            data.location = this.location.toObject();
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.reason.length)
            writer.writeString(3, this.reason);
        if (this.delta != 0)
            writer.writeInt32(4, this.delta);
        if (this.quantityBefore != 0)
            writer.writeDouble(5, this.quantityBefore);
        if (this.quantityAfter != 0)
            writer.writeDouble(6, this.quantityAfter);
        if (this.hasCost)
            writer.writeDouble(7, this.cost);
        if (this.hasNote)
            writer.writeString(8, this.note);
        if (this.itemId.length)
            writer.writeString(9, this.itemId);
        if (this.hasItem)
            writer.writeMessage(10, this.item, () => this.item.serialize(writer));
        if (this.locationId.length)
            writer.writeString(11, this.locationId);
        if (this.hasLocation)
            writer.writeMessage(12, this.location, () => this.location.serialize(writer));
        if (this.hasOrderId)
            writer.writeString(13, this.orderId);
        if (this.hasOrder)
            writer.writeMessage(14, this.order, () => this.order.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InventoryAdjustment {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InventoryAdjustment();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.reason = reader.readString();
                    break;
                case 4:
                    message.delta = reader.readInt32();
                    break;
                case 5:
                    message.quantityBefore = reader.readDouble();
                    break;
                case 6:
                    message.quantityAfter = reader.readDouble();
                    break;
                case 7:
                    message.cost = reader.readDouble();
                    break;
                case 8:
                    message.note = reader.readString();
                    break;
                case 9:
                    message.itemId = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.item, () => message.item = InventoryItem.deserialize(reader));
                    break;
                case 11:
                    message.locationId = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.location, () => message.location = Location.deserialize(reader));
                    break;
                case 13:
                    message.orderId = reader.readString();
                    break;
                case 14:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InventoryAdjustment {
        return InventoryAdjustment.deserialize(bytes);
    }
}
export class InventoryHistory extends pb_1.Message {
    #one_of_decls: number[][] = [[9], [10]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        type?: string;
        delta?: number;
        before?: number;
        after?: number;
        itemId?: string;
        item?: InventoryItem;
    } & (({
        orderId?: string;
    }) | ({
        order?: Order;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("delta" in data && data.delta != undefined) {
                this.delta = data.delta;
            }
            if ("before" in data && data.before != undefined) {
                this.before = data.before;
            }
            if ("after" in data && data.after != undefined) {
                this.after = data.after;
            }
            if ("itemId" in data && data.itemId != undefined) {
                this.itemId = data.itemId;
            }
            if ("item" in data && data.item != undefined) {
                this.item = data.item;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get delta() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set delta(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get before() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set before(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get after() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set after(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get itemId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set itemId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get item() {
        return pb_1.Message.getWrapperField(this, InventoryItem, 8) as InventoryItem;
    }
    set item(value: InventoryItem) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get hasItem() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setOneofField(this, 9, this.#one_of_decls[0], value);
    }
    get hasOrderId() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 10) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[1], value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get _orderId() {
        const cases: {
            [index: number]: "none" | "orderId";
        } = {
            0: "none",
            9: "orderId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9])];
    }
    get _order() {
        const cases: {
            [index: number]: "none" | "order";
        } = {
            0: "none",
            10: "order"
        };
        return cases[pb_1.Message.computeOneofCase(this, [10])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        type?: string;
        delta?: number;
        before?: number;
        after?: number;
        itemId?: string;
        item?: ReturnType<typeof InventoryItem.prototype.toObject>;
        orderId?: string;
        order?: ReturnType<typeof Order.prototype.toObject>;
    }): InventoryHistory {
        const message = new InventoryHistory({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.delta != null) {
            message.delta = data.delta;
        }
        if (data.before != null) {
            message.before = data.before;
        }
        if (data.after != null) {
            message.after = data.after;
        }
        if (data.itemId != null) {
            message.itemId = data.itemId;
        }
        if (data.item != null) {
            message.item = InventoryItem.fromObject(data.item);
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            type?: string;
            delta?: number;
            before?: number;
            after?: number;
            itemId?: string;
            item?: ReturnType<typeof InventoryItem.prototype.toObject>;
            orderId?: string;
            order?: ReturnType<typeof Order.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.delta != null) {
            data.delta = this.delta;
        }
        if (this.before != null) {
            data.before = this.before;
        }
        if (this.after != null) {
            data.after = this.after;
        }
        if (this.itemId != null) {
            data.itemId = this.itemId;
        }
        if (this.item != null) {
            data.item = this.item.toObject();
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.type.length)
            writer.writeString(3, this.type);
        if (this.delta != 0)
            writer.writeDouble(4, this.delta);
        if (this.before != 0)
            writer.writeDouble(5, this.before);
        if (this.after != 0)
            writer.writeDouble(6, this.after);
        if (this.itemId.length)
            writer.writeString(7, this.itemId);
        if (this.hasItem)
            writer.writeMessage(8, this.item, () => this.item.serialize(writer));
        if (this.hasOrderId)
            writer.writeString(9, this.orderId);
        if (this.hasOrder)
            writer.writeMessage(10, this.order, () => this.order.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InventoryHistory {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InventoryHistory();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.type = reader.readString();
                    break;
                case 4:
                    message.delta = reader.readDouble();
                    break;
                case 5:
                    message.before = reader.readDouble();
                    break;
                case 6:
                    message.after = reader.readDouble();
                    break;
                case 7:
                    message.itemId = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.item, () => message.item = InventoryItem.deserialize(reader));
                    break;
                case 9:
                    message.orderId = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InventoryHistory {
        return InventoryHistory.deserialize(bytes);
    }
}
export class Discount extends pb_1.Message {
    #one_of_decls: number[][] = [[4], [11]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        starts?: dependency_1.Timestamp;
        ends?: dependency_1.Timestamp;
        typ?: DiscountType;
        value?: number;
        once?: boolean;
        numUsed?: number;
        code?: string;
        shopId?: string;
        shop?: Shop;
        usage?: DiscountUsage[];
    } & (({
        deleted?: dependency_1.Timestamp;
    }) | ({
        usageLim?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("starts" in data && data.starts != undefined) {
                this.starts = data.starts;
            }
            if ("ends" in data && data.ends != undefined) {
                this.ends = data.ends;
            }
            if ("typ" in data && data.typ != undefined) {
                this.typ = data.typ;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("once" in data && data.once != undefined) {
                this.once = data.once;
            }
            if ("numUsed" in data && data.numUsed != undefined) {
                this.numUsed = data.numUsed;
            }
            if ("usageLim" in data && data.usageLim != undefined) {
                this.usageLim = data.usageLim;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("usage" in data && data.usage != undefined) {
                this.usage = data.usage;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get starts() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set starts(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasStarts() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get ends() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 6) as dependency_1.Timestamp;
    }
    set ends(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasEnds() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get typ() {
        return pb_1.Message.getFieldWithDefault(this, 7, DiscountType.PERCENT) as DiscountType;
    }
    set typ(value: DiscountType) {
        pb_1.Message.setField(this, 7, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set value(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get once() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set once(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get numUsed() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set numUsed(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get usageLim() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set usageLim(value: number) {
        pb_1.Message.setOneofField(this, 11, this.#one_of_decls[1], value);
    }
    get hasUsageLim() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 14) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get usage() {
        return pb_1.Message.getRepeatedWrapperField(this, DiscountUsage, 15) as DiscountUsage[];
    }
    set usage(value: DiscountUsage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _usageLim() {
        const cases: {
            [index: number]: "none" | "usageLim";
        } = {
            0: "none",
            11: "usageLim"
        };
        return cases[pb_1.Message.computeOneofCase(this, [11])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        starts?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        ends?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        typ?: DiscountType;
        value?: number;
        once?: boolean;
        numUsed?: number;
        usageLim?: number;
        code?: string;
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
        usage?: ReturnType<typeof DiscountUsage.prototype.toObject>[];
    }): Discount {
        const message = new Discount({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.starts != null) {
            message.starts = dependency_1.Timestamp.fromObject(data.starts);
        }
        if (data.ends != null) {
            message.ends = dependency_1.Timestamp.fromObject(data.ends);
        }
        if (data.typ != null) {
            message.typ = data.typ;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.once != null) {
            message.once = data.once;
        }
        if (data.numUsed != null) {
            message.numUsed = data.numUsed;
        }
        if (data.usageLim != null) {
            message.usageLim = data.usageLim;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        if (data.usage != null) {
            message.usage = data.usage.map(item => DiscountUsage.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            starts?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            ends?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            typ?: DiscountType;
            value?: number;
            once?: boolean;
            numUsed?: number;
            usageLim?: number;
            code?: string;
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
            usage?: ReturnType<typeof DiscountUsage.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.starts != null) {
            data.starts = this.starts.toObject();
        }
        if (this.ends != null) {
            data.ends = this.ends.toObject();
        }
        if (this.typ != null) {
            data.typ = this.typ;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.once != null) {
            data.once = this.once;
        }
        if (this.numUsed != null) {
            data.numUsed = this.numUsed;
        }
        if (this.usageLim != null) {
            data.usageLim = this.usageLim;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.usage != null) {
            data.usage = this.usage.map((item: DiscountUsage) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.hasStarts)
            writer.writeMessage(5, this.starts, () => this.starts.serialize(writer));
        if (this.hasEnds)
            writer.writeMessage(6, this.ends, () => this.ends.serialize(writer));
        if (this.typ != DiscountType.PERCENT)
            writer.writeEnum(7, this.typ);
        if (this.value != 0)
            writer.writeDouble(8, this.value);
        if (this.once != false)
            writer.writeBool(9, this.once);
        if (this.numUsed != 0)
            writer.writeInt32(10, this.numUsed);
        if (this.hasUsageLim)
            writer.writeInt32(11, this.usageLim);
        if (this.code.length)
            writer.writeString(12, this.code);
        if (this.shopId.length)
            writer.writeString(13, this.shopId);
        if (this.hasShop)
            writer.writeMessage(14, this.shop, () => this.shop.serialize(writer));
        if (this.usage.length)
            writer.writeRepeatedMessage(15, this.usage, (item: DiscountUsage) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Discount {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Discount();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.starts, () => message.starts = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.ends, () => message.ends = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 7:
                    message.typ = reader.readEnum();
                    break;
                case 8:
                    message.value = reader.readDouble();
                    break;
                case 9:
                    message.once = reader.readBool();
                    break;
                case 10:
                    message.numUsed = reader.readInt32();
                    break;
                case 11:
                    message.usageLim = reader.readInt32();
                    break;
                case 12:
                    message.code = reader.readString();
                    break;
                case 13:
                    message.shopId = reader.readString();
                    break;
                case 14:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.usage, () => pb_1.Message.addToRepeatedWrapperField(message, 15, DiscountUsage.deserialize(reader), DiscountUsage));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Discount {
        return Discount.deserialize(bytes);
    }
}
export class DiscountUsage extends pb_1.Message {
    #one_of_decls: number[][] = [[5], [6], [7], [8]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        value?: number;
        typ?: DiscountType;
    } & (({
        discountId?: string;
    }) | ({
        orderId?: string;
    }) | ({
        order?: Order;
    }) | ({
        discount?: Discount;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("typ" in data && data.typ != undefined) {
                this.typ = data.typ;
            }
            if ("discountId" in data && data.discountId != undefined) {
                this.discountId = data.discountId;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
            if ("discount" in data && data.discount != undefined) {
                this.discount = data.discount;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set value(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get typ() {
        return pb_1.Message.getFieldWithDefault(this, 4, DiscountType.PERCENT) as DiscountType;
    }
    set typ(value: DiscountType) {
        pb_1.Message.setField(this, 4, value);
    }
    get discountId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set discountId(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get hasDiscountId() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
    }
    get hasOrderId() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 7) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[2], value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get discount() {
        return pb_1.Message.getWrapperField(this, Discount, 8) as Discount;
    }
    set discount(value: Discount) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[3], value);
    }
    get hasDiscount() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get _discountId() {
        const cases: {
            [index: number]: "none" | "discountId";
        } = {
            0: "none",
            5: "discountId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _orderId() {
        const cases: {
            [index: number]: "none" | "orderId";
        } = {
            0: "none",
            6: "orderId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _order() {
        const cases: {
            [index: number]: "none" | "order";
        } = {
            0: "none",
            7: "order"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _discount() {
        const cases: {
            [index: number]: "none" | "discount";
        } = {
            0: "none",
            8: "discount"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        value?: number;
        typ?: DiscountType;
        discountId?: string;
        orderId?: string;
        order?: ReturnType<typeof Order.prototype.toObject>;
        discount?: ReturnType<typeof Discount.prototype.toObject>;
    }): DiscountUsage {
        const message = new DiscountUsage({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.typ != null) {
            message.typ = data.typ;
        }
        if (data.discountId != null) {
            message.discountId = data.discountId;
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        if (data.discount != null) {
            message.discount = Discount.fromObject(data.discount);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            value?: number;
            typ?: DiscountType;
            discountId?: string;
            orderId?: string;
            order?: ReturnType<typeof Order.prototype.toObject>;
            discount?: ReturnType<typeof Discount.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.typ != null) {
            data.typ = this.typ;
        }
        if (this.discountId != null) {
            data.discountId = this.discountId;
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        if (this.discount != null) {
            data.discount = this.discount.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.value != 0)
            writer.writeDouble(3, this.value);
        if (this.typ != DiscountType.PERCENT)
            writer.writeEnum(4, this.typ);
        if (this.hasDiscountId)
            writer.writeString(5, this.discountId);
        if (this.hasOrderId)
            writer.writeString(6, this.orderId);
        if (this.hasOrder)
            writer.writeMessage(7, this.order, () => this.order.serialize(writer));
        if (this.hasDiscount)
            writer.writeMessage(8, this.discount, () => this.discount.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscountUsage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscountUsage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.value = reader.readDouble();
                    break;
                case 4:
                    message.typ = reader.readEnum();
                    break;
                case 5:
                    message.discountId = reader.readString();
                    break;
                case 6:
                    message.orderId = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.discount, () => message.discount = Discount.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DiscountUsage {
        return DiscountUsage.deserialize(bytes);
    }
}
export class Webhook extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Webhook {
        const message = new Webhook({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Webhook {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Webhook();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Webhook {
        return Webhook.deserialize(bytes);
    }
}
export class ShippingZone extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        shopId?: string;
        shop?: Shop;
        rates?: ShippingRate[];
    } & (({
        deleted?: dependency_1.Timestamp;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("rates" in data && data.rates != undefined) {
                this.rates = data.rates;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 7) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get rates() {
        return pb_1.Message.getRepeatedWrapperField(this, ShippingRate, 8) as ShippingRate[];
    }
    set rates(value: ShippingRate[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
        rates?: ReturnType<typeof ShippingRate.prototype.toObject>[];
    }): ShippingZone {
        const message = new ShippingZone({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        if (data.rates != null) {
            message.rates = data.rates.map(item => ShippingRate.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
            rates?: ReturnType<typeof ShippingRate.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.rates != null) {
            data.rates = this.rates.map((item: ShippingRate) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.name.length)
            writer.writeString(5, this.name);
        if (this.shopId.length)
            writer.writeString(6, this.shopId);
        if (this.hasShop)
            writer.writeMessage(7, this.shop, () => this.shop.serialize(writer));
        if (this.rates.length)
            writer.writeRepeatedMessage(8, this.rates, (item: ShippingRate) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShippingZone {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShippingZone();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.name = reader.readString();
                    break;
                case 6:
                    message.shopId = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.rates, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ShippingRate.deserialize(reader), ShippingRate));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShippingZone {
        return ShippingZone.deserialize(bytes);
    }
}
export class ShippingRate extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        name?: string;
        price?: number;
        subtotalRange?: number[];
        deliveryDuration?: dependency_1.Timestamp[];
        zoneId?: string;
        zone?: ShippingZone;
    } & (({
        deleted?: dependency_1.Timestamp;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("subtotalRange" in data && data.subtotalRange != undefined) {
                this.subtotalRange = data.subtotalRange;
            }
            if ("deliveryDuration" in data && data.deliveryDuration != undefined) {
                this.deliveryDuration = data.deliveryDuration;
            }
            if ("zoneId" in data && data.zoneId != undefined) {
                this.zoneId = data.zoneId;
            }
            if ("zone" in data && data.zone != undefined) {
                this.zone = data.zone;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get subtotalRange() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set subtotalRange(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get deliveryDuration() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Timestamp, 8) as dependency_1.Timestamp[];
    }
    set deliveryDuration(value: dependency_1.Timestamp[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get zoneId() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set zoneId(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get zone() {
        return pb_1.Message.getWrapperField(this, ShippingZone, 10) as ShippingZone;
    }
    set zone(value: ShippingZone) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get hasZone() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        name?: string;
        price?: number;
        subtotalRange?: number[];
        deliveryDuration?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>[];
        zoneId?: string;
        zone?: ReturnType<typeof ShippingZone.prototype.toObject>;
    }): ShippingRate {
        const message = new ShippingRate({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.subtotalRange != null) {
            message.subtotalRange = data.subtotalRange;
        }
        if (data.deliveryDuration != null) {
            message.deliveryDuration = data.deliveryDuration.map(item => dependency_1.Timestamp.fromObject(item));
        }
        if (data.zoneId != null) {
            message.zoneId = data.zoneId;
        }
        if (data.zone != null) {
            message.zone = ShippingZone.fromObject(data.zone);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            name?: string;
            price?: number;
            subtotalRange?: number[];
            deliveryDuration?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>[];
            zoneId?: string;
            zone?: ReturnType<typeof ShippingZone.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.subtotalRange != null) {
            data.subtotalRange = this.subtotalRange;
        }
        if (this.deliveryDuration != null) {
            data.deliveryDuration = this.deliveryDuration.map((item: dependency_1.Timestamp) => item.toObject());
        }
        if (this.zoneId != null) {
            data.zoneId = this.zoneId;
        }
        if (this.zone != null) {
            data.zone = this.zone.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.name.length)
            writer.writeString(5, this.name);
        if (this.price != 0)
            writer.writeDouble(6, this.price);
        if (this.subtotalRange.length)
            writer.writePackedDouble(7, this.subtotalRange);
        if (this.deliveryDuration.length)
            writer.writeRepeatedMessage(8, this.deliveryDuration, (item: dependency_1.Timestamp) => item.serialize(writer));
        if (this.zoneId.length)
            writer.writeString(9, this.zoneId);
        if (this.hasZone)
            writer.writeMessage(10, this.zone, () => this.zone.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShippingRate {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShippingRate();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.name = reader.readString();
                    break;
                case 6:
                    message.price = reader.readDouble();
                    break;
                case 7:
                    message.subtotalRange = reader.readPackedDouble();
                    break;
                case 8:
                    reader.readMessage(message.deliveryDuration, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_1.Timestamp.deserialize(reader), dependency_1.Timestamp));
                    break;
                case 9:
                    message.zoneId = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.zone, () => message.zone = ShippingZone.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShippingRate {
        return ShippingRate.deserialize(bytes);
    }
}
export class TaxConfiguration extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        charges?: boolean;
        taxIncluded?: boolean;
        shopId?: string;
        shop?: Shop;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("charges" in data && data.charges != undefined) {
                this.charges = data.charges;
            }
            if ("taxIncluded" in data && data.taxIncluded != undefined) {
                this.taxIncluded = data.taxIncluded;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get charges() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set charges(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get taxIncluded() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set taxIncluded(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 7) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        charges?: boolean;
        taxIncluded?: boolean;
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
    }): TaxConfiguration {
        const message = new TaxConfiguration({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.charges != null) {
            message.charges = data.charges;
        }
        if (data.taxIncluded != null) {
            message.taxIncluded = data.taxIncluded;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            charges?: boolean;
            taxIncluded?: boolean;
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.charges != null) {
            data.charges = this.charges;
        }
        if (this.taxIncluded != null) {
            data.taxIncluded = this.taxIncluded;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.charges != false)
            writer.writeBool(4, this.charges);
        if (this.taxIncluded != false)
            writer.writeBool(5, this.taxIncluded);
        if (this.shopId.length)
            writer.writeString(6, this.shopId);
        if (this.hasShop)
            writer.writeMessage(7, this.shop, () => this.shop.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaxConfiguration {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TaxConfiguration();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.charges = reader.readBool();
                    break;
                case 5:
                    message.taxIncluded = reader.readBool();
                    break;
                case 6:
                    message.shopId = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TaxConfiguration {
        return TaxConfiguration.deserialize(bytes);
    }
}
export class Tax extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        country?: string;
        rate?: number;
        configId?: string;
        config?: TaxConfiguration;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("country" in data && data.country != undefined) {
                this.country = data.country;
            }
            if ("rate" in data && data.rate != undefined) {
                this.rate = data.rate;
            }
            if ("configId" in data && data.configId != undefined) {
                this.configId = data.configId;
            }
            if ("config" in data && data.config != undefined) {
                this.config = data.config;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get country() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set country(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get rate() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set rate(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get configId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set configId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get config() {
        return pb_1.Message.getWrapperField(this, TaxConfiguration, 7) as TaxConfiguration;
    }
    set config(value: TaxConfiguration) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasConfig() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        country?: string;
        rate?: number;
        configId?: string;
        config?: ReturnType<typeof TaxConfiguration.prototype.toObject>;
    }): Tax {
        const message = new Tax({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.country != null) {
            message.country = data.country;
        }
        if (data.rate != null) {
            message.rate = data.rate;
        }
        if (data.configId != null) {
            message.configId = data.configId;
        }
        if (data.config != null) {
            message.config = TaxConfiguration.fromObject(data.config);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            country?: string;
            rate?: number;
            configId?: string;
            config?: ReturnType<typeof TaxConfiguration.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.country != null) {
            data.country = this.country;
        }
        if (this.rate != null) {
            data.rate = this.rate;
        }
        if (this.configId != null) {
            data.configId = this.configId;
        }
        if (this.config != null) {
            data.config = this.config.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.country.length)
            writer.writeString(4, this.country);
        if (this.rate != 0)
            writer.writeDouble(5, this.rate);
        if (this.configId.length)
            writer.writeString(6, this.configId);
        if (this.hasConfig)
            writer.writeMessage(7, this.config, () => this.config.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tax {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tax();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.country = reader.readString();
                    break;
                case 5:
                    message.rate = reader.readDouble();
                    break;
                case 6:
                    message.configId = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.config, () => message.config = TaxConfiguration.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Tax {
        return Tax.deserialize(bytes);
    }
}
export class TaxLine extends pb_1.Message {
    #one_of_decls: number[][] = [[7], [8], [9], [10]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        title?: string;
        price?: number;
        rate?: number;
    } & (({
        itemId?: string;
    }) | ({
        orderId?: string;
    }) | ({
        item?: LineItem;
    }) | ({
        order?: Order;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("rate" in data && data.rate != undefined) {
                this.rate = data.rate;
            }
            if ("itemId" in data && data.itemId != undefined) {
                this.itemId = data.itemId;
            }
            if ("orderId" in data && data.orderId != undefined) {
                this.orderId = data.orderId;
            }
            if ("item" in data && data.item != undefined) {
                this.item = data.item;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get rate() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set rate(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get itemId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set itemId(value: string) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
    }
    get hasItemId() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get orderId() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set orderId(value: string) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[1], value);
    }
    get hasOrderId() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get item() {
        return pb_1.Message.getWrapperField(this, LineItem, 9) as LineItem;
    }
    set item(value: LineItem) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[2], value);
    }
    get hasItem() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Order, 10) as Order;
    }
    set order(value: Order) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[3], value);
    }
    get hasOrder() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get _itemId() {
        const cases: {
            [index: number]: "none" | "itemId";
        } = {
            0: "none",
            7: "itemId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _orderId() {
        const cases: {
            [index: number]: "none" | "orderId";
        } = {
            0: "none",
            8: "orderId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    get _item() {
        const cases: {
            [index: number]: "none" | "item";
        } = {
            0: "none",
            9: "item"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9])];
    }
    get _order() {
        const cases: {
            [index: number]: "none" | "order";
        } = {
            0: "none",
            10: "order"
        };
        return cases[pb_1.Message.computeOneofCase(this, [10])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        title?: string;
        price?: number;
        rate?: number;
        itemId?: string;
        orderId?: string;
        item?: ReturnType<typeof LineItem.prototype.toObject>;
        order?: ReturnType<typeof Order.prototype.toObject>;
    }): TaxLine {
        const message = new TaxLine({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.rate != null) {
            message.rate = data.rate;
        }
        if (data.itemId != null) {
            message.itemId = data.itemId;
        }
        if (data.orderId != null) {
            message.orderId = data.orderId;
        }
        if (data.item != null) {
            message.item = LineItem.fromObject(data.item);
        }
        if (data.order != null) {
            message.order = Order.fromObject(data.order);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            title?: string;
            price?: number;
            rate?: number;
            itemId?: string;
            orderId?: string;
            item?: ReturnType<typeof LineItem.prototype.toObject>;
            order?: ReturnType<typeof Order.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.rate != null) {
            data.rate = this.rate;
        }
        if (this.itemId != null) {
            data.itemId = this.itemId;
        }
        if (this.orderId != null) {
            data.orderId = this.orderId;
        }
        if (this.item != null) {
            data.item = this.item.toObject();
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.title.length)
            writer.writeString(4, this.title);
        if (this.price != 0)
            writer.writeDouble(5, this.price);
        if (this.rate != 0)
            writer.writeDouble(6, this.rate);
        if (this.hasItemId)
            writer.writeString(7, this.itemId);
        if (this.hasOrderId)
            writer.writeString(8, this.orderId);
        if (this.hasItem)
            writer.writeMessage(9, this.item, () => this.item.serialize(writer));
        if (this.hasOrder)
            writer.writeMessage(10, this.order, () => this.order.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaxLine {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TaxLine();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.title = reader.readString();
                    break;
                case 5:
                    message.price = reader.readDouble();
                    break;
                case 6:
                    message.rate = reader.readDouble();
                    break;
                case 7:
                    message.itemId = reader.readString();
                    break;
                case 8:
                    message.orderId = reader.readString();
                    break;
                case 9:
                    reader.readMessage(message.item, () => message.item = LineItem.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.order, () => message.order = Order.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TaxLine {
        return TaxLine.deserialize(bytes);
    }
}
export class Collection extends pb_1.Message {
    #one_of_decls: number[][] = [[4], [5], [7], [9]];
    constructor(data?: any[] | ({
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
        isPublish?: boolean;
        title?: string;
        shopId?: string;
        shop?: Shop;
        products?: CollectionProduct[];
        images?: CollectionImage[];
    } & (({
        deleted?: dependency_1.Timestamp;
    }) | ({
        published?: dependency_1.Timestamp;
    }) | ({
        sort?: string;
    }) | ({
        desc?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12, 13], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("published" in data && data.published != undefined) {
                this.published = data.published;
            }
            if ("isPublish" in data && data.isPublish != undefined) {
                this.isPublish = data.isPublish;
            }
            if ("sort" in data && data.sort != undefined) {
                this.sort = data.sort;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("desc" in data && data.desc != undefined) {
                this.desc = data.desc;
            }
            if ("shopId" in data && data.shopId != undefined) {
                this.shopId = data.shopId;
            }
            if ("shop" in data && data.shop != undefined) {
                this.shop = data.shop;
            }
            if ("products" in data && data.products != undefined) {
                this.products = data.products;
            }
            if ("images" in data && data.images != undefined) {
                this.images = data.images;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get deleted() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set deleted(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasDeleted() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get published() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set published(value: dependency_1.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[1], value);
    }
    get hasPublished() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get isPublish() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isPublish(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get sort() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set sort(value: string) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[2], value);
    }
    get hasSort() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get desc() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set desc(value: string) {
        pb_1.Message.setOneofField(this, 9, this.#one_of_decls[3], value);
    }
    get hasDesc() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get shopId() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set shopId(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get shop() {
        return pb_1.Message.getWrapperField(this, Shop, 11) as Shop;
    }
    set shop(value: Shop) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get hasShop() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get products() {
        return pb_1.Message.getRepeatedWrapperField(this, CollectionProduct, 12) as CollectionProduct[];
    }
    set products(value: CollectionProduct[]) {
        pb_1.Message.setRepeatedWrapperField(this, 12, value);
    }
    get images() {
        return pb_1.Message.getRepeatedWrapperField(this, CollectionImage, 13) as CollectionImage[];
    }
    set images(value: CollectionImage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get _deleted() {
        const cases: {
            [index: number]: "none" | "deleted";
        } = {
            0: "none",
            4: "deleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _published() {
        const cases: {
            [index: number]: "none" | "published";
        } = {
            0: "none",
            5: "published"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _sort() {
        const cases: {
            [index: number]: "none" | "sort";
        } = {
            0: "none",
            7: "sort"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _desc() {
        const cases: {
            [index: number]: "none" | "desc";
        } = {
            0: "none",
            9: "desc"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9])];
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        published?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        isPublish?: boolean;
        sort?: string;
        title?: string;
        desc?: string;
        shopId?: string;
        shop?: ReturnType<typeof Shop.prototype.toObject>;
        products?: ReturnType<typeof CollectionProduct.prototype.toObject>[];
        images?: ReturnType<typeof CollectionImage.prototype.toObject>[];
    }): Collection {
        const message = new Collection({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        if (data.deleted != null) {
            message.deleted = dependency_1.Timestamp.fromObject(data.deleted);
        }
        if (data.published != null) {
            message.published = dependency_1.Timestamp.fromObject(data.published);
        }
        if (data.isPublish != null) {
            message.isPublish = data.isPublish;
        }
        if (data.sort != null) {
            message.sort = data.sort;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.desc != null) {
            message.desc = data.desc;
        }
        if (data.shopId != null) {
            message.shopId = data.shopId;
        }
        if (data.shop != null) {
            message.shop = Shop.fromObject(data.shop);
        }
        if (data.products != null) {
            message.products = data.products.map(item => CollectionProduct.fromObject(item));
        }
        if (data.images != null) {
            message.images = data.images.map(item => CollectionImage.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            deleted?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            published?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            isPublish?: boolean;
            sort?: string;
            title?: string;
            desc?: string;
            shopId?: string;
            shop?: ReturnType<typeof Shop.prototype.toObject>;
            products?: ReturnType<typeof CollectionProduct.prototype.toObject>[];
            images?: ReturnType<typeof CollectionImage.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted.toObject();
        }
        if (this.published != null) {
            data.published = this.published.toObject();
        }
        if (this.isPublish != null) {
            data.isPublish = this.isPublish;
        }
        if (this.sort != null) {
            data.sort = this.sort;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.desc != null) {
            data.desc = this.desc;
        }
        if (this.shopId != null) {
            data.shopId = this.shopId;
        }
        if (this.shop != null) {
            data.shop = this.shop.toObject();
        }
        if (this.products != null) {
            data.products = this.products.map((item: CollectionProduct) => item.toObject());
        }
        if (this.images != null) {
            data.images = this.images.map((item: CollectionImage) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (this.hasDeleted)
            writer.writeMessage(4, this.deleted, () => this.deleted.serialize(writer));
        if (this.hasPublished)
            writer.writeMessage(5, this.published, () => this.published.serialize(writer));
        if (this.isPublish != false)
            writer.writeBool(6, this.isPublish);
        if (this.hasSort)
            writer.writeString(7, this.sort);
        if (this.title.length)
            writer.writeString(8, this.title);
        if (this.hasDesc)
            writer.writeString(9, this.desc);
        if (this.shopId.length)
            writer.writeString(10, this.shopId);
        if (this.hasShop)
            writer.writeMessage(11, this.shop, () => this.shop.serialize(writer));
        if (this.products.length)
            writer.writeRepeatedMessage(12, this.products, (item: CollectionProduct) => item.serialize(writer));
        if (this.images.length)
            writer.writeRepeatedMessage(13, this.images, (item: CollectionImage) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Collection {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Collection();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.deleted, () => message.deleted = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.published, () => message.published = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 6:
                    message.isPublish = reader.readBool();
                    break;
                case 7:
                    message.sort = reader.readString();
                    break;
                case 8:
                    message.title = reader.readString();
                    break;
                case 9:
                    message.desc = reader.readString();
                    break;
                case 10:
                    message.shopId = reader.readString();
                    break;
                case 11:
                    reader.readMessage(message.shop, () => message.shop = Shop.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 12, CollectionProduct.deserialize(reader), CollectionProduct));
                    break;
                case 13:
                    reader.readMessage(message.images, () => pb_1.Message.addToRepeatedWrapperField(message, 13, CollectionImage.deserialize(reader), CollectionImage));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Collection {
        return Collection.deserialize(bytes);
    }
}
export class CollectionProduct extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        collectionId?: string;
        productId?: string;
        collection?: Collection;
        product?: Product;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("collectionId" in data && data.collectionId != undefined) {
                this.collectionId = data.collectionId;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("collection" in data && data.collection != undefined) {
                this.collection = data.collection;
            }
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get collectionId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set collectionId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get collection() {
        return pb_1.Message.getWrapperField(this, Collection, 5) as Collection;
    }
    set collection(value: Collection) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasCollection() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get product() {
        return pb_1.Message.getWrapperField(this, Product, 6) as Product;
    }
    set product(value: Product) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasProduct() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        collectionId?: string;
        productId?: string;
        collection?: ReturnType<typeof Collection.prototype.toObject>;
        product?: ReturnType<typeof Product.prototype.toObject>;
    }): CollectionProduct {
        const message = new CollectionProduct({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.collectionId != null) {
            message.collectionId = data.collectionId;
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.collection != null) {
            message.collection = Collection.fromObject(data.collection);
        }
        if (data.product != null) {
            message.product = Product.fromObject(data.product);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            collectionId?: string;
            productId?: string;
            collection?: ReturnType<typeof Collection.prototype.toObject>;
            product?: ReturnType<typeof Product.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.collectionId != null) {
            data.collectionId = this.collectionId;
        }
        if (this.productId != null) {
            data.productId = this.productId;
        }
        if (this.collection != null) {
            data.collection = this.collection.toObject();
        }
        if (this.product != null) {
            data.product = this.product.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.collectionId.length)
            writer.writeString(3, this.collectionId);
        if (this.productId.length)
            writer.writeString(4, this.productId);
        if (this.hasCollection)
            writer.writeMessage(5, this.collection, () => this.collection.serialize(writer));
        if (this.hasProduct)
            writer.writeMessage(6, this.product, () => this.product.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionProduct {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionProduct();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.collectionId = reader.readString();
                    break;
                case 4:
                    message.productId = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.collection, () => message.collection = Collection.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.product, () => message.product = Product.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CollectionProduct {
        return CollectionProduct.deserialize(bytes);
    }
}
export class CollectionImage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        url?: string;
        altText?: string;
        position?: number;
        collectionId?: string;
        collection?: Collection;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("altText" in data && data.altText != undefined) {
                this.altText = data.altText;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("collectionId" in data && data.collectionId != undefined) {
                this.collectionId = data.collectionId;
            }
            if ("collection" in data && data.collection != undefined) {
                this.collection = data.collection;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get altText() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set altText(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get collectionId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set collectionId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get collection() {
        return pb_1.Message.getWrapperField(this, Collection, 7) as Collection;
    }
    set collection(value: Collection) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasCollection() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        url?: string;
        altText?: string;
        position?: number;
        collectionId?: string;
        collection?: ReturnType<typeof Collection.prototype.toObject>;
    }): CollectionImage {
        const message = new CollectionImage({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.altText != null) {
            message.altText = data.altText;
        }
        if (data.position != null) {
            message.position = data.position;
        }
        if (data.collectionId != null) {
            message.collectionId = data.collectionId;
        }
        if (data.collection != null) {
            message.collection = Collection.fromObject(data.collection);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            url?: string;
            altText?: string;
            position?: number;
            collectionId?: string;
            collection?: ReturnType<typeof Collection.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.url != null) {
            data.url = this.url;
        }
        if (this.altText != null) {
            data.altText = this.altText;
        }
        if (this.position != null) {
            data.position = this.position;
        }
        if (this.collectionId != null) {
            data.collectionId = this.collectionId;
        }
        if (this.collection != null) {
            data.collection = this.collection.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.url.length)
            writer.writeString(3, this.url);
        if (this.altText.length)
            writer.writeString(4, this.altText);
        if (this.position != 0)
            writer.writeInt32(5, this.position);
        if (this.collectionId.length)
            writer.writeString(6, this.collectionId);
        if (this.hasCollection)
            writer.writeMessage(7, this.collection, () => this.collection.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionImage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionImage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.url = reader.readString();
                    break;
                case 4:
                    message.altText = reader.readString();
                    break;
                case 5:
                    message.position = reader.readInt32();
                    break;
                case 6:
                    message.collectionId = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.collection, () => message.collection = Collection.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CollectionImage {
        return CollectionImage.deserialize(bytes);
    }
}
export class Localization extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        created?: dependency_1.Timestamp;
        updated?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("updated" in data && data.updated != undefined) {
                this.updated = data.updated;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get created() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set created(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreated() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get updated() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set updated(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdated() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        id?: string;
        created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Localization {
        const message = new Localization({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.created != null) {
            message.created = dependency_1.Timestamp.fromObject(data.created);
        }
        if (data.updated != null) {
            message.updated = dependency_1.Timestamp.fromObject(data.updated);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            created?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.created != null) {
            data.created = this.created.toObject();
        }
        if (this.updated != null) {
            data.updated = this.updated.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasCreated)
            writer.writeMessage(2, this.created, () => this.created.serialize(writer));
        if (this.hasUpdated)
            writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Localization {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Localization();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.created, () => message.created = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.updated, () => message.updated = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Localization {
        return Localization.deserialize(bytes);
    }
}
