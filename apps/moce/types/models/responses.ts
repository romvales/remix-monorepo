/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.2
 * source: models/responses.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./core";
import * as pb_1 from "google-protobuf";
export class PaginationMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        page?: number;
        itemsPerPage?: number;
        totalItems?: number;
        totalPages?: number;
        hasNext?: boolean;
        hasPrev?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("itemsPerPage" in data && data.itemsPerPage != undefined) {
                this.itemsPerPage = data.itemsPerPage;
            }
            if ("totalItems" in data && data.totalItems != undefined) {
                this.totalItems = data.totalItems;
            }
            if ("totalPages" in data && data.totalPages != undefined) {
                this.totalPages = data.totalPages;
            }
            if ("hasNext" in data && data.hasNext != undefined) {
                this.hasNext = data.hasNext;
            }
            if ("hasPrev" in data && data.hasPrev != undefined) {
                this.hasPrev = data.hasPrev;
            }
        }
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get itemsPerPage() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set itemsPerPage(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get totalItems() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set totalItems(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get totalPages() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set totalPages(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get hasNext() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set hasNext(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get hasPrev() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set hasPrev(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        page?: number;
        itemsPerPage?: number;
        totalItems?: number;
        totalPages?: number;
        hasNext?: boolean;
        hasPrev?: boolean;
    }): PaginationMetadata {
        const message = new PaginationMetadata({});
        if (data.page != null) {
            message.page = data.page;
        }
        if (data.itemsPerPage != null) {
            message.itemsPerPage = data.itemsPerPage;
        }
        if (data.totalItems != null) {
            message.totalItems = data.totalItems;
        }
        if (data.totalPages != null) {
            message.totalPages = data.totalPages;
        }
        if (data.hasNext != null) {
            message.hasNext = data.hasNext;
        }
        if (data.hasPrev != null) {
            message.hasPrev = data.hasPrev;
        }
        return message;
    }
    toObject() {
        const data: {
            page?: number;
            itemsPerPage?: number;
            totalItems?: number;
            totalPages?: number;
            hasNext?: boolean;
            hasPrev?: boolean;
        } = {};
        if (this.page != null) {
            data.page = this.page;
        }
        if (this.itemsPerPage != null) {
            data.itemsPerPage = this.itemsPerPage;
        }
        if (this.totalItems != null) {
            data.totalItems = this.totalItems;
        }
        if (this.totalPages != null) {
            data.totalPages = this.totalPages;
        }
        if (this.hasNext != null) {
            data.hasNext = this.hasNext;
        }
        if (this.hasPrev != null) {
            data.hasPrev = this.hasPrev;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.page != 0)
            writer.writeInt32(1, this.page);
        if (this.itemsPerPage != 0)
            writer.writeInt32(2, this.itemsPerPage);
        if (this.totalItems != 0)
            writer.writeInt32(3, this.totalItems);
        if (this.totalPages != 0)
            writer.writeInt32(4, this.totalPages);
        if (this.hasNext != false)
            writer.writeBool(5, this.hasNext);
        if (this.hasPrev != false)
            writer.writeBool(6, this.hasPrev);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaginationMetadata {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaginationMetadata();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.page = reader.readInt32();
                    break;
                case 2:
                    message.itemsPerPage = reader.readInt32();
                    break;
                case 3:
                    message.totalItems = reader.readInt32();
                    break;
                case 4:
                    message.totalPages = reader.readInt32();
                    break;
                case 5:
                    message.hasNext = reader.readBool();
                    break;
                case 6:
                    message.hasPrev = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PaginationMetadata {
        return PaginationMetadata.deserialize(bytes);
    }
}
export class ErrorMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        trace?: string;
        details?: dependency_1.Any;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("trace" in data && data.trace != undefined) {
                this.trace = data.trace;
            }
            if ("details" in data && data.details != undefined) {
                this.details = data.details;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get trace() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set trace(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get details() {
        return pb_1.Message.getWrapperField(this, dependency_1.Any, 3) as dependency_1.Any;
    }
    set details(value: dependency_1.Any) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasDetails() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        message?: string;
        trace?: string;
        details?: ReturnType<typeof dependency_1.Any.prototype.toObject>;
    }): ErrorMetadata {
        const message = new ErrorMetadata({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.trace != null) {
            message.trace = data.trace;
        }
        if (data.details != null) {
            message.details = dependency_1.Any.fromObject(data.details);
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            trace?: string;
            details?: ReturnType<typeof dependency_1.Any.prototype.toObject>;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.trace != null) {
            data.trace = this.trace;
        }
        if (this.details != null) {
            data.details = this.details.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.trace.length)
            writer.writeString(2, this.trace);
        if (this.hasDetails)
            writer.writeMessage(3, this.details, () => this.details.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorMetadata {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorMetadata();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    message.trace = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.details, () => message.details = dependency_1.Any.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ErrorMetadata {
        return ErrorMetadata.deserialize(bytes);
    }
}
export class ResponseMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [[5], [6]];
    constructor(data?: any[] | ({
        code?: number;
        reqId?: string;
        msg?: string;
        timestamp?: string;
    } & (({
        paging?: PaginationMetadata;
    }) | ({
        errors?: ErrorMetadata;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("reqId" in data && data.reqId != undefined) {
                this.reqId = data.reqId;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("paging" in data && data.paging != undefined) {
                this.paging = data.paging;
            }
            if ("errors" in data && data.errors != undefined) {
                this.errors = data.errors;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get reqId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set reqId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set timestamp(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get paging() {
        return pb_1.Message.getWrapperField(this, PaginationMetadata, 5) as PaginationMetadata;
    }
    set paging(value: PaginationMetadata) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get hasPaging() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get errors() {
        return pb_1.Message.getWrapperField(this, ErrorMetadata, 6) as ErrorMetadata;
    }
    set errors(value: ErrorMetadata) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[1], value);
    }
    get hasErrors() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get _paging() {
        const cases: {
            [index: number]: "none" | "paging";
        } = {
            0: "none",
            5: "paging"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _errors() {
        const cases: {
            [index: number]: "none" | "errors";
        } = {
            0: "none",
            6: "errors"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    static fromObject(data: {
        code?: number;
        reqId?: string;
        msg?: string;
        timestamp?: string;
        paging?: ReturnType<typeof PaginationMetadata.prototype.toObject>;
        errors?: ReturnType<typeof ErrorMetadata.prototype.toObject>;
    }): ResponseMetadata {
        const message = new ResponseMetadata({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.reqId != null) {
            message.reqId = data.reqId;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.paging != null) {
            message.paging = PaginationMetadata.fromObject(data.paging);
        }
        if (data.errors != null) {
            message.errors = ErrorMetadata.fromObject(data.errors);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            reqId?: string;
            msg?: string;
            timestamp?: string;
            paging?: ReturnType<typeof PaginationMetadata.prototype.toObject>;
            errors?: ReturnType<typeof ErrorMetadata.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.reqId != null) {
            data.reqId = this.reqId;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.paging != null) {
            data.paging = this.paging.toObject();
        }
        if (this.errors != null) {
            data.errors = this.errors.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.reqId.length)
            writer.writeString(2, this.reqId);
        if (this.msg.length)
            writer.writeString(3, this.msg);
        if (this.timestamp.length)
            writer.writeString(4, this.timestamp);
        if (this.hasPaging)
            writer.writeMessage(5, this.paging, () => this.paging.serialize(writer));
        if (this.hasErrors)
            writer.writeMessage(6, this.errors, () => this.errors.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseMetadata {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseMetadata();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.reqId = reader.readString();
                    break;
                case 3:
                    message.msg = reader.readString();
                    break;
                case 4:
                    message.timestamp = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.paging, () => message.paging = PaginationMetadata.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.errors, () => message.errors = ErrorMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResponseMetadata {
        return ResponseMetadata.deserialize(bytes);
    }
}
export class UserActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4]];
    constructor(data?: any[] | ({
        metadata?: ResponseMetadata;
    } & (({
        user?: dependency_2.User;
    }) | ({
        totalUsers?: number;
    }) | ({
        totalDeletedUsers?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("totalUsers" in data && data.totalUsers != undefined) {
                this.totalUsers = data.totalUsers;
            }
            if ("totalDeletedUsers" in data && data.totalDeletedUsers != undefined) {
                this.totalDeletedUsers = data.totalDeletedUsers;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_2.User, 2) as dependency_2.User;
    }
    set user(value: dependency_2.User) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasUser() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get totalUsers() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set totalUsers(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get hasTotalUsers() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get totalDeletedUsers() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set totalDeletedUsers(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get hasTotalDeletedUsers() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get _user() {
        const cases: {
            [index: number]: "none" | "user";
        } = {
            0: "none",
            2: "user"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _totalUsers() {
        const cases: {
            [index: number]: "none" | "totalUsers";
        } = {
            0: "none",
            3: "totalUsers"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _totalDeletedUsers() {
        const cases: {
            [index: number]: "none" | "totalDeletedUsers";
        } = {
            0: "none",
            4: "totalDeletedUsers"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        user?: ReturnType<typeof dependency_2.User.prototype.toObject>;
        totalUsers?: number;
        totalDeletedUsers?: number;
    }): UserActionResponse {
        const message = new UserActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        if (data.user != null) {
            message.user = dependency_2.User.fromObject(data.user);
        }
        if (data.totalUsers != null) {
            message.totalUsers = data.totalUsers;
        }
        if (data.totalDeletedUsers != null) {
            message.totalDeletedUsers = data.totalDeletedUsers;
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
            user?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            totalUsers?: number;
            totalDeletedUsers?: number;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.totalUsers != null) {
            data.totalUsers = this.totalUsers;
        }
        if (this.totalDeletedUsers != null) {
            data.totalDeletedUsers = this.totalDeletedUsers;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (this.hasUser)
            writer.writeMessage(2, this.user, () => this.user.serialize(writer));
        if (this.hasTotalUsers)
            writer.writeInt64(3, this.totalUsers);
        if (this.hasTotalDeletedUsers)
            writer.writeInt64(4, this.totalDeletedUsers);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.user, () => message.user = dependency_2.User.deserialize(reader));
                    break;
                case 3:
                    message.totalUsers = reader.readInt64();
                    break;
                case 4:
                    message.totalDeletedUsers = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserActionResponse {
        return UserActionResponse.deserialize(bytes);
    }
}
export class CustomerActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): CustomerActionResponse {
        const message = new CustomerActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomerActionResponse {
        return CustomerActionResponse.deserialize(bytes);
    }
}
export class ShopActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): ShopActionResponse {
        const message = new ShopActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShopActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShopActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShopActionResponse {
        return ShopActionResponse.deserialize(bytes);
    }
}
export class ProductActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): ProductActionResponse {
        const message = new ProductActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductActionResponse {
        return ProductActionResponse.deserialize(bytes);
    }
}
export class OrderActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): OrderActionResponse {
        const message = new OrderActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrderActionResponse {
        return OrderActionResponse.deserialize(bytes);
    }
}
export class CollectionActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): CollectionActionResponse {
        const message = new CollectionActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CollectionActionResponse {
        return CollectionActionResponse.deserialize(bytes);
    }
}
export class TransactionActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): TransactionActionResponse {
        const message = new TransactionActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransactionActionResponse {
        return TransactionActionResponse.deserialize(bytes);
    }
}
export class WebhookActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        metadata?: ResponseMetadata;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
    }
    set metadata(value: ResponseMetadata) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMetadata() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
    }): WebhookActionResponse {
        const message = new WebhookActionResponse({});
        if (data.metadata != null) {
            message.metadata = ResponseMetadata.fromObject(data.metadata);
        }
        return message;
    }
    toObject() {
        const data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
        } = {};
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMetadata)
            writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WebhookActionResponse {
        return WebhookActionResponse.deserialize(bytes);
    }
}
